<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基礎Python(二) | 神經網絡與深度學習 | Tensorflow 2.0 系列 (3) | AI入門</title>
      <link href="/10_Tensorflow2_Python2.html"/>
      <url>/10_Tensorflow2_Python2.html</url>
      
        <content type="html"><![CDATA[<h2 id="Python內置數據結構"><a href="#Python內置數據結構" class="headerlink" title="Python內置數據結構"></a>Python內置數據結構</h2><br><h3 id="序列數據結構"><a href="#序列數據結構" class="headerlink" title="序列數據結構"></a>序列數據結構</h3><p>在序列數據結構中，成員都是跟順序排列的(sequence)，而每個元素的位置是指標(index)，通過指標，<br>可以存取或訪問序列中的特定成員，而Python序列的數據類型有字串、列表、元組，而列表和元組可以存放不同類型的數據<br>列表用中括號 [ ] 表示 e.g. [1,2,3]，而元組使用小括號 ( ) 表示 e.g. (1,2,3)<br><img src="https://i.imgur.com/VqZP5ft.png" width="70%" height="70%"><br><br></p><h3 id="指標-index"><a href="#指標-index" class="headerlink" title="指標 (index)"></a>指標 (index)</h3><p>通過指標(index)，我們可以訪問序列中指定的位置的元素<br><img src="https://i.imgur.com/SwPcnM7.png" width="70%" height="70%"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#字符串指標</span></span><br><span class="line">str_py = <span class="string">"Python"</span></span><br><span class="line">print(str_py[<span class="number">0</span>]) <span class="comment">#Output: P</span></span><br><span class="line">print(str_py[<span class="number">-1</span>]) <span class="comment">#Output: n</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#列表指標</span></span><br><span class="line">lst_1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">print(lst_1[<span class="number">1</span>]) <span class="comment">#Output: 2</span></span><br><span class="line">print(lst_1[<span class="number">-2</span>]) <span class="comment">#Output: 2</span></span><br></pre></td></tr></table></figure><br><h3 id="切片-slice"><a href="#切片-slice" class="headerlink" title="切片 (slice)"></a>切片 (slice)</h3><p>通過切片 (slice)，我們可以一次過從序列中獲取多個元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#字符串切片</span></span><br><span class="line">str_py = <span class="string">"Python"</span></span><br><span class="line">print(str_py[<span class="number">1</span>:<span class="number">5</span>]) <span class="comment"># Output: ytho</span></span><br><span class="line">print(str_py[<span class="number">1</span>:]) <span class="comment"># Output: ython</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#列表切片</span></span><br><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">print(list1[<span class="number">2</span>:]) <span class="comment"># Output: [3]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#混合列表切片</span></span><br><span class="line">lst_student = [<span class="number">160612</span>,<span class="string">"一心"</span>,<span class="number">18</span>,[<span class="number">92</span>,<span class="number">76</span>,<span class="number">85</span>]]</span><br><span class="line">print(lst_student[<span class="number">1</span>:]) <span class="comment"># Output: ["一心",18,[92,76,85]]</span></span><br><span class="line">print(lst_student[:<span class="number">3</span>]) <span class="comment"># Output: [160612,"一心",18]</span></span><br></pre></td></tr></table></figure><br><h3 id="獲取序列的長度"><a href="#獲取序列的長度" class="headerlink" title="獲取序列的長度"></a>獲取序列的長度</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#利用len(列表名稱)來獲取序列的長度</span></span><br><span class="line">str_py = <span class="string">"Python"</span></span><br><span class="line">print(len(str_py)) <span class="comment"># Output: 6</span></span><br><span class="line">print(len(<span class="string">"hello"</span>)) <span class="comment"># Output: 5</span></span><br><span class="line">lst_1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">print(len(str_py)) <span class="comment"># Output: 3</span></span><br><span class="line">lst_2 = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]]</span><br><span class="line">print(len(lst_2)) <span class="comment"># Output: 2</span></span><br><span class="line">lst_mix = [<span class="number">160612</span>,<span class="string">"一心"</span>,<span class="number">18</span>,[<span class="number">92</span>,<span class="number">76</span>,<span class="number">85</span>]]</span><br><span class="line">print(len(lst_mix)) <span class="comment"># Output: 4</span></span><br><span class="line">tup_1 = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">print(len(tup_1)) <span class="comment"># Output: 3</span></span><br></pre></td></tr></table></figure><br><h3 id="更新列表"><a href="#更新列表" class="headerlink" title="更新列表"></a>更新列表</h3><p>向列表中加入元素：append()、insert()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在列表的最後位置追加元素</span></span><br><span class="line">lst_1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">lst_1.append(<span class="number">4</span>)</span><br><span class="line">print(lst_1) <span class="comment"># Output: [1,2,3,4]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在列表中加入元素</span></span><br><span class="line">lst_1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">lst_1.insert(<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line">print(lst_1) <span class="comment"># Output: [1,5,2,4]</span></span><br></pre></td></tr></table></figure><br>合並列表：extend()、"+"運算符<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lst_1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">lst_2 = [<span class="number">4</span>]</span><br><span class="line">lst_1.extend(lst_2)</span><br><span class="line">print(lst_1) <span class="comment"># Output: [1,2,3,4]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lst_1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">lst_2 = [<span class="number">4</span>]</span><br><span class="line">lst_3 = lst_1 + lst_2</span><br><span class="line">print(lst_3) <span class="comment"># Output: [1,2,3,4]</span></span><br></pre></td></tr></table></figure><br>刪除列表中的元素：del語句<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lst_1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>，<span class="number">4</span>]</span><br><span class="line"><span class="keyword">del</span> lst_1[<span class="number">1</span>] <span class="comment"># 刪除指標為1的元素</span></span><br><span class="line">print(lst_1) <span class="comment"># Output: [1,3,4]</span></span><br></pre></td></tr></table></figure><br>對列表中的元素進行排序：sort()、reverse()<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lst_1 = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>]</span><br><span class="line">lst_1.sort() <span class="comment"># 將lst_1中元素以小至大進行排序</span></span><br><span class="line">print(lst_1) <span class="comment"># Output: [1,2,3,4]</span></span><br><span class="line">lst_1.reverse() <span class="comment"># 將lst_1中元素以大至小進行排序</span></span><br><span class="line">print(lst_1) <span class="comment"># Output：[4,3,2,1]</span></span><br></pre></td></tr></table></figure><br>遍歷列表中的元素<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lst_1 = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lst_1:</span><br><span class="line">print(i, end=<span class="string">" "</span>) <span class="comment"># Output: 1, 2, 3, 4</span></span><br></pre></td></tr></table></figure><br><h2 id="字典與集合"><a href="#字典與集合" class="headerlink" title="字典與集合"></a>字典與集合</h2><br><h3 id="字典-dictionary"><a href="#字典-dictionary" class="headerlink" title="字典 (dictionary)"></a>字典 (dictionary)</h3><ul><li>每個字典元素都是一個 鍵/值對 (key/value)</li><li>鍵：關鍵字</li><li>值：關鍵字對應的取值<br></li></ul><h3 id="創建字典"><a href="#創建字典" class="headerlink" title="創建字典"></a>創建字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dic_score = &#123;<span class="string">"中文"</span>:;<span class="number">80</span>, <span class="string">"英文"</span>:<span class="number">85</span>, <span class="string">"數學"</span>:<span class="number">78</span>, <span class="string">"電腦"</span>:<span class="number">90</span>&#125;</span><br><span class="line">dic_employ = &#123;<span class="string">"name"</span>:&#123;<span class="string">"first"</span>:<span class="string">"Mary"</span>,<span class="string">"last"</span>:<span class="string">"Smith"</span>&#125;,<span class="string">"age"</span>:<span class="number">26</span>&#125;</span><br></pre></td></tr></table></figure><br><h3 id="打印字典、訪問字典元素"><a href="#打印字典、訪問字典元素" class="headerlink" title="打印字典、訪問字典元素"></a>打印字典、訪問字典元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dic_employ = &#123;<span class="string">"name"</span>:<span class="string">"Mary"</span>,<span class="string">"age"</span>:<span class="number">26</span>&#125;</span><br><span class="line">print(dic_employ) <span class="comment"># Output: &#123;"name":"Mary","age":26&#125;</span></span><br><span class="line">print(dic_employ[<span class="string">"name"</span>]) <span class="comment"># Output: Mary</span></span><br><span class="line">print(len(dic_employ)) <span class="comment"># Output: 2</span></span><br><span class="line">print(<span class="string">'age'</span> <span class="keyword">in</span> dic_student) <span class="comment"># 判斷字典是否存在元素，Output: True</span></span><br></pre></td></tr></table></figure><br><p>遍歷字典元素的鍵key，當然還有值(value和鍵值對(item)作為返回部分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dic_student = &#123;<span class="string">"name"</span>:<span class="string">"John"</span>,<span class="string">"age"</span>:<span class="number">20</span>,<span class="string">"gender"</span>:<span class="string">"male"</span>,<span class="string">"score"</span>:<span class="number">98</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> dic_student.keys():</span><br><span class="line">print(key,end=<span class="string">" "</span>) <span class="comment"># Output: gender name score age</span></span><br></pre></td></tr></table></figure><br><h3 id="更新字典"><a href="#更新字典" class="headerlink" title="更新字典"></a>更新字典</h3><p>加入、修改指定元素的取值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dic_student = &#123;<span class="string">"name"</span>:<span class="string">"John"</span>,<span class="string">"age"</span>:<span class="number">20</span>,<span class="string">"gender"</span>:<span class="string">"male"</span>&#125;</span><br><span class="line">dic_student[<span class="string">"score"</span>] = <span class="number">90</span></span><br><span class="line">print(dic_student) <span class="comment"># Output: &#123;"age":20,"gender":"male","name":"John","score":90&#125;</span></span><br><span class="line">dic_student[<span class="string">"score"</span>] = <span class="number">98</span></span><br><span class="line">print(dic_student) <span class="comment"># Output: &#123;"age":20,"gender":"male","name":"John","score":98&#125;</span></span><br></pre></td></tr></table></figure><br><h3 id="合並字典"><a href="#合並字典" class="headerlink" title="合並字典"></a>合並字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dic_student1 = &#123;<span class="string">"age"</span>:<span class="number">20</span>,<span class="string">"gender"</span>:<span class="string">"male"</span>&#125;</span><br><span class="line">dic_stuednt2 = &#123;<span class="string">"name"</span>:<span class="string">"John"</span>,<span class="string">"score"</span>:<span class="number">90</span>&#125;</span><br><span class="line">dic_student1.update(dic_stuednt2)</span><br><span class="line">print(dic_student1) <span class="comment"># Output: &#123;"age":20,"gender":"male","name":"John","score":90&#125;</span></span><br></pre></td></tr></table></figure><br><h3 id="刪除字典；pop-指定元素的關鍵字-，清空字典中的所有元素clear"><a href="#刪除字典；pop-指定元素的關鍵字-，清空字典中的所有元素clear" class="headerlink" title="刪除字典；pop(指定元素的關鍵字)，清空字典中的所有元素clear()"></a>刪除字典；pop(指定元素的關鍵字)，清空字典中的所有元素clear()</h3><p>刪除字典中的指定元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dic_student = &#123;<span class="string">"name"</span>:<span class="string">"John"</span>,<span class="string">"age"</span>:<span class="number">20</span>,<span class="string">"gender"</span>:<span class="string">"male"</span>&#125;</span><br><span class="line">dic_student.pop(<span class="string">"age"</span>)</span><br><span class="line">print(dic_student) <span class="comment"># Output: &#123;gender":"male","name":"John"&#125;</span></span><br><span class="line">dic_student.clear()</span><br><span class="line">print(dic_student) <span class="comment"># Output: &#123;&#125;</span></span><br></pre></td></tr></table></figure><br><h3 id="集合-set"><a href="#集合-set" class="headerlink" title="集合 (set)"></a>集合 (set)</h3><p>集合(set)由一組無序；排列的元素組成<br>    - 可變集合(set)：創建後可加入、修改及刪除其中的元素<br>    - 不可變集合(fronzenset)：創建後就不能再改變了</p><br><h3 id="創建集合"><a href="#創建集合" class="headerlink" title="創建集合"></a>創建集合</h3><p>Python會自動將集合中重複的元素移除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">print(set1) <span class="comment"># Output: &#123;1,2,3,4,5&#125;</span></span><br><span class="line">print(len(set1)) <span class="comment"># Output: 5</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set2 = set(<span class="string">"Python"</span>)</span><br><span class="line">print(set2) <span class="comment"># Output: &#123;'h', 'P', 't', 'o', 'n', 'y'&#125;</span></span><br><span class="line">set3 = frozenset(<span class="string">"Python"</span>)</span><br><span class="line">print(set3) <span class="comment"># Output: frozenset(&#123;'h', 'P', 't', 'o', 'n', 'y'&#125;)</span></span><br></pre></td></tr></table></figure><p>集合中的元素是無序的，因此不能通過指標來訪問<br>打印集合、獲取集合長度、遍歷集合的方法，與其他內置數據類型相似<br><br></p><h2 id="函數"><a href="#函數" class="headerlink" title="函數"></a>函數</h2><h3 id="函數-function-簡介"><a href="#函數-function-簡介" class="headerlink" title="函數(function)簡介"></a>函數(function)簡介</h3><ul><li>實現某種特定功能的程式碼塊</li><li>程式簡潔，可重覆調用、封裝性好、便於共享 </li><li>系統函數和用戶自訂函數</li></ul><p>Python內置函數：</p><ul><li>數學運算函數 </li><li>輸入輸出函數 </li><li>類型轉換函數 </li><li>邏輯判斷函數 </li><li>序列操作函數 </li><li>對象操作函數</li></ul><br><h3 id="數學運算函數"><a href="#數學運算函數" class="headerlink" title="數學運算函數"></a>數學運算函數</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;abs(-1) # 絕對值</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt;pow(2,3) # 次方</span><br><span class="line">8</span><br><span class="line">&gt;&gt;&gt;round(3.1415,2) # 參數指定的小數位數，四捨五入</span><br><span class="line">3.14</span><br><span class="line">divmod(5,3) # 計算a除以b的商和餘數，返回一個元組</span><br><span class="line">(1,2)</span><br></pre></td></tr></table></figure><h3 id="常用的Python內置函數"><a href="#常用的Python內置函數" class="headerlink" title="常用的Python內置函數"></a>常用的Python內置函數</h3><img src="https://i.imgur.com/133Pmxk.png" width="70%" height="70%"><br><h3 id="用家自訂函數"><a href="#用家自訂函數" class="headerlink" title="用家自訂函數"></a>用家自訂函數</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回一個值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a,b)</span></span></span><br><span class="line">c = a + b</span><br><span class="line"><span class="keyword">return</span> c</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回多個值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_mul</span><span class="params">(a,b)</span></span></span><br><span class="line">add = a + b</span><br><span class="line">mul = a * b</span><br><span class="line"><span class="keyword">return</span> add,mul</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 無返回值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span><span class="params">(your_name)</span>:</span></span><br><span class="line">print(<span class="string">"Hello,%s!"</span> %your_name)</span><br></pre></td></tr></table></figure><h3 id="調用-call-函數"><a href="#調用-call-函數" class="headerlink" title="調用(call)函數"></a>調用(call)函數</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_mul</span><span class="params">(a,b)</span>:</span> <span class="comment"># 定義函數</span></span><br><span class="line">add = a + b</span><br><span class="line">mul = a * b</span><br><span class="line"><span class="keyword">return</span> add, mul</span><br><span class="line"></span><br><span class="line">x,y = add_mul(<span class="number">1</span>,<span class="number">2</span>) <span class="comment"># 調用函數</span></span><br><span class="line">print(<span class="string">"add:"</span>,x,<span class="string">"; mul:"</span>,y) <span class="comment"># Output: add: 3; mul: 2</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span><span class="params">()</span>:</span> <span class="comment"># 定義無參數的函數</span></span><br><span class="line">print(<span class="string">"Hello!"</span>)</span><br><span class="line"></span><br><span class="line">say_hello() <span class="comment"># 調用函數，Output: Hello!</span></span><br></pre></td></tr></table></figure><br><h2 id="模組、套裝和庫"><a href="#模組、套裝和庫" class="headerlink" title="模組、套裝和庫"></a>模組、套裝和庫</h2><p>模組(Module)</p><ul><li>模塊是一個python文件(.py)，擁有多個功能相近的函數或類</li><li>便於代碼重用，提高編程效率，提高了代碼的可維護性</li><li>避免函數名和變量名沖突</li></ul><p>套件(Package)</p><ul><li>為了避免模塊名沖突，Python引入按目錄來組織模塊的方法</li><li>一個套件對應一個資料夾，將功能相近的模塊(Python文件)，放在同一個資料夾下</li><li>在作為套件的資料夾下有一個<strong>init</strong>.py文件</li><li>子套件:子目錄中也有<strong>init</strong>.py文件</li></ul><p>庫(Liberay):具有相關功能的模組或套件的集合</p><p>套件Package的結構：<br>這個套件對應資料夾package_a， 其中有一個<strong>init</strong>文件，和兩個模組，還有一個子套件;子套件中也有2個模組</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package_a</span><br><span class="line">├─ __init__.py</span><br><span class="line">├─ module_a1.py</span><br><span class="line">├─ module_a2/py</span><br><span class="line">└─ subpack_ab</span><br><span class="line">    ├─ __init__.py</span><br><span class="line">    ├─ module_ab_1.py</span><br><span class="line">    └─ module_ab_2.py</span><br></pre></td></tr></table></figure><br><h3 id="匯入模組、套件和庫"><a href="#匯入模組、套件和庫" class="headerlink" title="匯入模組、套件和庫"></a>匯入模組、套件和庫</h3><ul><li><p>匯入整個套件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line">np.random.random()</span><br></pre></td></tr></table></figure></li><li><p>匯入套件中指定的模組與子套件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line">random.random()</span><br></pre></td></tr></table></figure></li></ul><p>在匯入語句的作用域(scope)：</p><ul><li>在程式頂部匯入模組，作用域是全局的(global)</li><li>在函數的內部匯入語句，作用域就是局部的(local)</li></ul><p>建議匯入的順序</p><ol><li>Python標準庫/模組</li><li>Python第三方庫/模組</li><li>自訂模組</li></ol><br><h3 id="使用模組-套件-庫中的函數和變量"><a href="#使用模組-套件-庫中的函數和變量" class="headerlink" title="使用模組/套件/庫中的函數和變量"></a>使用模組/套件/庫中的函數和變量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;import math     #匯入math模組</span><br><span class="line">&gt;&gt;&gt;math.pow(2,3)</span><br><span class="line">8.0</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;from math import sqrt as s     #從math模組中匯入sqrt函數並重新命名為s</span><br><span class="line">&gt;&gt;&gt;s(16)</span><br><span class="line">4.0</span><br></pre></td></tr></table></figure><h3 id="模組"><a href="#模組" class="headerlink" title="模組"></a>模組</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 創建自訂模組: mymodule.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_str</span><span class="params">(str)</span>:</span>  <span class="comment"># 打印字符串</span></span><br><span class="line">print(str)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(a,b)</span>:</span>   <span class="comment">#求和</span></span><br><span class="line"><span class="keyword">return</span> a + b</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 調用call自訂模組</span></span><br><span class="line">&gt;&gt;&gt;<span class="keyword">import</span> mymodule <span class="keyword">as</span> mm <span class="comment"># 匯入mymodule模組</span></span><br><span class="line">&gt;&gt;&gt;mm.print_str(<span class="string">"Python"</span>) <span class="comment"># 調用打印函數</span></span><br><span class="line">Python</span><br><span class="line">&gt;&gt;&gt;mm.sum(<span class="number">2</span>,<span class="number">3</span>) <span class="comment"># 調用求和函數</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p>Python 標準庫中的模組</p><ul><li><p>sys模組：提供有關Python執行環境的變量和函數，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">import</span> sys</span><br><span class="line">&gt;&gt;&gt;sys.platform <span class="comment"># 獲得當前作業系統</span></span><br><span class="line">win32</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;sys.path <span class="comment"># 獲得指定模組的路徑</span></span><br><span class="line">[<span class="string">''</span>,</span><br><span class="line"><span class="string">'F:\\python3.7\\Lib\\idlelib'</span>,</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>常用的模組有platform、math、random、decimal、fractions、time、datetime、calender模組等</p><br></li></ul><h2 id="OOP物件導向編程"><a href="#OOP物件導向編程" class="headerlink" title="OOP物件導向編程"></a>OOP物件導向編程</h2><p>OOP(object oriented programming)，又稱物件導向程式設計，是一種程式設計思想和開發方式，較傳統的process-oriented programming更符合真實世界的環境<br>例如在真實世界中，要形容一個人，我們可以從他的靜態特徵、動態行為作為描述<br>靜態特徵包括：姓名、年齡、性別，動態特徵包括：說話、吃飯、打招呼<br>在OOP中，我們將靜態特徵稱為屬性attribute，動態特徵稱為方法method，利用物件(object)將屬性和方法封裝在一起<br><img src="https://i.imgur.com/Q3toK0T.png" width="40%" height="40%"><br>如果將物件導向的描述轉換成程式碼：<br><img src="https://i.imgur.com/NwUvx8F.png" width="70%" height="70%"><br>在上面例子中，我們見到Peter和Mary有著同樣的屬性和方法，因為他們都是人類<br>在OOP中，我們將具有相同屬性和方法的物件集合，名為類別(class)，如人類(person)，而Peter和Mary都是類別中的實例<br>進一步，我們其實可以將Person劃分為更多的子類別，例如teacher, student, worker<br>子類別繼承了父類別person的全部屬性和方法，也具備自己獨特的屬性和方法，例如teacher有專業的職稱等</p><h3 id="新增物件"><a href="#新增物件" class="headerlink" title="新增物件"></a>新增物件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">()</span>:</span></span><br><span class="line">monry = <span class="number">10000</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span><span class="params">(self)</span>:</span></span><br><span class="line">print(<span class="string">"Hello!"</span>)</span><br><span class="line"></span><br><span class="line">peter = Person()</span><br><span class="line"></span><br><span class="line">print(peter.money)</span><br><span class="line">peter.say_hello()</span><br></pre></td></tr></table></figure><p>執行結果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10000</span><br><span class="line">Hello!</span><br></pre></td></tr></table></figure><h3 id="動態新增物件屬性"><a href="#動態新增物件屬性" class="headerlink" title="動態新增物件屬性"></a>動態新增物件屬性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">()</span>:</span></span><br><span class="line">monry = <span class="number">10000</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span><span class="params">(self)</span>:</span></span><br><span class="line">print(<span class="string">"Hello!"</span>)</span><br><span class="line"></span><br><span class="line">peter = Person()</span><br><span class="line"></span><br><span class="line">peter.major = <span class="string">"computer science"</span></span><br><span class="line">print(<span class="string">"peter's major is "</span>, peter.major) <span class="comment"># Output: peter's major is computer science</span></span><br></pre></td></tr></table></figure><p>更詳細例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">()</span>:</span> <span class="comment"># 類別屬性，所有的實例共同享有</span></span><br><span class="line">money = <span class="number">10000</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span><span class="params">(self)</span>:</span></span><br><span class="line">print(<span class="string">"Hello!"</span>)</span><br><span class="line"></span><br><span class="line">peter = Person()</span><br><span class="line">mary = Person()</span><br><span class="line"></span><br><span class="line">print(Person.money) <span class="comment"># Output: 10000</span></span><br><span class="line">print(peter.money) <span class="comment"># Output: 10000</span></span><br><span class="line">print(mary.money) <span class="comment"># Output: 10000</span></span><br><span class="line"></span><br><span class="line">Person.money = <span class="number">9000</span> <span class="comment"># 修改類別屬性，所有實例都會受影響</span></span><br><span class="line"></span><br><span class="line">print(Person.money) <span class="comment"># Output: 9000</span></span><br><span class="line">print(peter.money) <span class="comment"># Output: 9000</span></span><br><span class="line">print(mary.money) <span class="comment"># Output: 9000</span></span><br><span class="line"></span><br><span class="line">peter.money = <span class="number">5000</span> <span class="comment"># peter自己新增了的實例屬性money，他已經不是原來的類別屬性money了</span></span><br><span class="line"></span><br><span class="line">print(Person.money) <span class="comment"># Output: 9000</span></span><br><span class="line">print(peter.money) <span class="comment"># Output: 5000</span></span><br><span class="line">print(mary.money) <span class="comment"># Output: 9000</span></span><br></pre></td></tr></table></figure><br><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><br><h3 id="打開文件"><a href="#打開文件" class="headerlink" title="打開文件"></a>打開文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文件對象 = open(文件名稱,<span class="string">'訪問模式'</span>)</span><br></pre></td></tr></table></figure><img src="https://i.imgur.com/SzDTwrj.png" width="70%" height="70%"><p>絕對路徑：從drive開始的路徑<br>C:\Program Files\Anaconda3\lib\site-packages\ipykernel_<em>main_</em>.py</p><p>相對路徑：從當前目錄下的路徑<br>例如..\python\file.txt -&gt;完整路徑會根據你的當前路徑：D\jupyter\example\python\file.txt</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 獲得當前路徑</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">print(os.getcwd())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#打開文件</span></span><br><span class="line">f = open(<span class="string">"c:/myfile"</span>) <span class="comment"># 成功打開文件後會返回一個文件物件，否則會返回錯誤</span></span><br><span class="line">f1 = open(<span class="string">"mypython.txt"</span>,<span class="string">'w'</span>) <span class="comment"># 訪問模式'w'，如果在目錄中找不到這個文件，就會自動新增一個</span></span><br></pre></td></tr></table></figure><br><h3 id="關閉文件"><a href="#關閉文件" class="headerlink" title="關閉文件"></a>關閉文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文件物件.close()  或  f.close()  # 在寫入文件後，應該立即關閉文件，避免意外事故(當機)造成的錯誤</span><br></pre></td></tr></table></figure><br><h3 id="讀取文件"><a href="#讀取文件" class="headerlink" title="讀取文件"></a>讀取文件</h3><p>在資源管理器重打開mypython.txt文本，寫入”Python3.0”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#讀取文件</span></span><br><span class="line">&gt;&gt;&gt;f = open(<span class="string">"mypython.txt"</span>)</span><br><span class="line">&gt;&gt;&gt;f.read()</span><br><span class="line"><span class="string">'Python3.0'</span></span><br></pre></td></tr></table></figure><p>更多操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">文件物件.readline() <span class="comment"># 每次只讀取文件中的一行</span></span><br><span class="line">文件物件.readline(字節數) <span class="comment"># 根據指定字節數讀取文件的內容</span></span><br></pre></td></tr></table></figure><br><h3 id="寫入內容"><a href="#寫入內容" class="headerlink" title="寫入內容"></a>寫入內容</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">"myfile.txt"</span>,<span class="string">'w'</span>)</span><br><span class="line">f.write(<span class="string">"Hello, World"</span>)</span><br></pre></td></tr></table></figure><p>完整實例：打開文件、讀取文件、寫入文件、關閉文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;f = open(<span class="string">"myfile.txt"</span>,<span class="string">'w'</span>)</span><br><span class="line">&gt;&gt;&gt;f.write(<span class="string">"Hello!"</span>)</span><br><span class="line">&gt;&gt;&gt;f.close()</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;f = open(<span class="string">"myfile.txt"</span>)</span><br><span class="line">&gt;&gt;&gt;f.read()</span><br><span class="line"><span class="string">'Hello!'</span></span><br><span class="line">&gt;&gt;&gt;f.close()</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;f = open(<span class="string">"myfile.txt"</span>,<span class="string">'a'</span>)</span><br><span class="line">&gt;&gt;&gt;f.write(<span class="string">"World!"</span>)</span><br><span class="line"><span class="number">6</span></span><br><span class="line">&gt;&gt;&gt;f.close()</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;f = open(<span class="string">"myfile.txt"</span>)</span><br><span class="line">&gt;&gt;&gt;f.read()</span><br><span class="line"><span class="string">'Hello!World!'</span></span><br><span class="line">&gt;&gt;&gt;f.close()</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;f = open(<span class="string">"myfile.txt"</span>,<span class="string">'w'</span>)</span><br><span class="line">&gt;&gt;&gt;f.write(<span class="string">"Python3.0"</span>)</span><br><span class="line"><span class="number">9</span></span><br><span class="line">&gt;&gt;&gt;f.close()</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;f = open(<span class="string">"myfile.txt"</span>)</span><br><span class="line">&gt;&gt;&gt;f.read()</span><br><span class="line">Python3<span class="number">.0</span></span><br></pre></td></tr></table></figure><br><h3 id="例外處理-異常處理"><a href="#例外處理-異常處理" class="headerlink" title="例外處理(異常處理)"></a>例外處理(異常處理)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>: <span class="comment"># 在程式執行時，解釋器會嘗試執行try語句中的所有程式碼</span></span><br><span class="line">程式碼</span><br><span class="line"><span class="keyword">except</span> 例外<span class="number">1</span> <span class="keyword">as</span> 錯誤原因: <span class="comment"># 如果語句被執行後沒有錯誤/例外發生，就會忽略except後的程式碼</span></span><br><span class="line">出現錯誤<span class="number">1</span>後的處理程式碼</span><br><span class="line"><span class="keyword">except</span> 例外<span class="number">2</span> <span class="keyword">as</span> 錯誤原因: <span class="comment"># 當某個except所指定的例子發生後，會忽略try子句中剩餘的語句，直接跳轉到對應例外的處理程式碼處執行</span></span><br><span class="line">出現錯誤<span class="number">2</span>後的處理程式碼</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">aList = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">print(aList[<span class="number">3</span>])</span><br><span class="line">print(<span class="string">"try語句繼續執行中..."</span>)</span><br><span class="line"><span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line">print(e)</span><br><span class="line">print(<span class="string">"例外已處理"</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"程式繼續執行中..."</span>)</span><br></pre></td></tr></table></figure><p>執行結果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list index out of range</span><br><span class="line">例外已處理</span><br><span class="line">程式繼續執行中...</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">aList = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">print(aList[<span class="number">2</span>])</span><br><span class="line">print(<span class="string">"try語句繼續執行中..."</span>)</span><br><span class="line"><span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line">print(e)</span><br><span class="line">print(<span class="string">"例外已處理"</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"程式繼續執行中..."</span>)</span><br></pre></td></tr></table></figure><p>執行結果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">try語句繼續執行中...</span><br></pre></td></tr></table></figure><br><h3 id="Python中常見的例外-錯誤"><a href="#Python中常見的例外-錯誤" class="headerlink" title="Python中常見的例外/錯誤"></a>Python中常見的例外/錯誤</h3><ul><li>IOError: 輸入/輸出錯誤(無法打開文件)</li><li>ImportError: 無法導入模組或套件(路徑問題或名稱錯誤)</li><li>IndentationError: 縮進錯誤(程式碼沒有正確對齊)</li><li>NameError: 沒有聲明、或初始化物件</li><li>KeyError: 試圖訪問字典里不存在的鍵</li><li>AttributeError: 試圖訪問一個物件沒有的屬性</li><li>TypeError : 類型不吻合</li><li>ValueError: 傳入一個調用者不期望的值，即使值的類型是正確的</li></ul><br><h3 id="例外類別的繼承關係"><a href="#例外類別的繼承關係" class="headerlink" title="例外類別的繼承關係"></a>例外類別的繼承關係</h3><p>Exception是所有非系統退出例外類別的基類，在編程時，可以通過處理它來避免程式遇到錯誤而退出，但有可能會隱藏了某些錯誤。<br><img src="https://i.imgur.com/0ZMA8Dw.png" width="50%" height="50%"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">語句</span><br><span class="line"><span class="keyword">except</span> exception <span class="keyword">as</span> e:</span><br><span class="line">例外處理語句</span><br></pre></td></tr></table></figure><br><h3 id="finally子句"><a href="#finally子句" class="headerlink" title="finally子句"></a>finally子句</h3><p>finally: 無論例外是否發生，都會執行，常用於關閉資源等清理工作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">print(<span class="string">"try語句開始"</span>)</span><br><span class="line">f = open(‘c:/test.txt’)</span><br><span class="line">print(f.read())</span><br><span class="line">print(<span class="string">"try語句結束"</span>)</span><br><span class="line"><span class="keyword">except</span> IOError <span class="keyword">as</span> e:</span><br><span class="line">print(<span class="string">"except子句"</span>)</span><br><span class="line">print(e)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">print(<span class="string">"finally子句"</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>執行結果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>語句開始</span><br><span class="line"><span class="keyword">except</span>子句</span><br><span class="line">[Erro <span class="number">2</span>] No such file <span class="keyword">or</span> directory: <span class="string">'c:/test.txt'</span></span><br><span class="line"><span class="keyword">finally</span>子句</span><br></pre></td></tr></table></figure><br><h2 id="上下文管理器"><a href="#上下文管理器" class="headerlink" title="上下文管理器"></a>上下文管理器</h2><br><h3 id="with語句"><a href="#with語句" class="headerlink" title="with語句"></a>with語句</h3><p>我們可以使用with語句代替try-finally語句，程式碼將更加簡潔清晰<br>對於需要對資源進行存取的任務，無論在程式碼執行過程中，是否發生例外/異常，都會執行清理工作，釋放資源<br>例外處理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">f = open(<span class="string">"mypython.txt"</span>)</span><br><span class="line">print(f.read())</span><br><span class="line"><span class="keyword">except</span> IOError <span class="keyword">as</span> e:</span><br><span class="line">print(e)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>反觀，with語句的程式碼則簡單得多：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"mypython.txt"</span>) <span class="keyword">as</span> f:</span><br><span class="line">print(f.read())</span><br></pre></td></tr></table></figure><p>在with語句完成時，會自動關閉文件，如果再次讀取這個文件，就會出現文件關閉的錯誤提示信息<br><br></p><h3 id="實現上下文管理器"><a href="#實現上下文管理器" class="headerlink" title="實現上下文管理器"></a>實現上下文管理器</h3><ul><li>上下文管理器是Python中的一種協議，它保證了每次程式碼執行的一致性 </li><li>一旦進入上下文管理器，就一定會按照規定的步驟退出</li><li>如果合理地設計了退出上下文管理器的步驟，就能夠很好的處理例外/異常</li><li>上下文管理器被最多用到的場景是資源清理操作</li><li>實現上下文管理器，只要在類別定義時，實現<strong>enter</strong>()方法和<strong>exit</strong>()方法即可</li></ul><p>例子：模擬實現一個文件類別</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span><span class="params">()</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">def</span> <span class="title">__init__</span><span class="params">(self, filename, mode:</span></span></span><br><span class="line"><span class="class"><span class="params">self.filename = filename</span></span></span><br><span class="line"><span class="class"><span class="params">self.mode = mode</span></span></span><br><span class="line"><span class="class"><span class="params"></span></span></span><br><span class="line"><span class="class"><span class="params">def __enter__<span class="params">(self)</span>:</span></span></span><br><span class="line"><span class="class"><span class="params">print<span class="params">(<span class="string">"執行__enter__()方法"</span>)</span></span></span></span><br><span class="line"><span class="class"><span class="params">self.f = open<span class="params">(self.filename, self.mode)</span></span></span></span><br><span class="line"><span class="class"><span class="params">return self.f</span></span></span><br><span class="line"><span class="class"><span class="params"></span></span></span><br><span class="line"><span class="class"><span class="params">def __exit__<span class="params">(self, *args)</span>:</span></span></span><br><span class="line"><span class="class"><span class="params">print<span class="params">(<span class="string">"執行__exit__方法"</span>)</span></span></span></span><br><span class="line"><span class="class"><span class="params">self.f.close<span class="params">(ß)</span></span></span></span><br></pre></td></tr></table></figure><p>以閱讀方式打開當前目錄下的mypython文件，並輸出文件內容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> File(<span class="string">"mypython.txt"</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">print(f.read())</span><br></pre></td></tr></table></figure><p>執行結果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">執行__enter__()方法</span><br><span class="line">Python3<span class="number">.0</span></span><br><span class="line">執行__exit__方法</span><br></pre></td></tr></table></figure><br><ul><li>在執行with語句塊之前，首先執行了<strong>enter()</strong>方法，然後再執行with語句塊，最後執行<strong>exit()</strong>方法</li><li>采用這種方式讀取文件時，即使執行過程中出現了異常，<strong>exit()</strong>方法也會被執行，完成關閉文件的操作</li></ul><br>]]></content>
      
      
      <categories>
          
          <category> Tensorflow 2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基礎Python(一) | 神經網絡與深度學習 | Tensorflow 2.0 系列 (2) | AI入門</title>
      <link href="/9_Tensorflow2_Python.html"/>
      <url>/9_Tensorflow2_Python.html</url>
      
        <content type="html"><![CDATA[<h2 id="認識Python"><a href="#認識Python" class="headerlink" title="認識Python"></a>認識Python</h2><br><h3 id="熱門編程語言-Python"><a href="#熱門編程語言-Python" class="headerlink" title="熱門編程語言 Python"></a>熱門編程語言 Python</h3><p>Python的熱門趨勢在很大程度上是由大量可用的資源庫推動的，尤其是在人工智能領域，例如Keras庫在深度學習領域中的舉足輕重：Keras提供了TensorFlow、CNTK和Theano深度學習deep learning框架和工具等界面。當Python在1991年首次发布時，人們並沒有預料到它會產生如此大的影響，深度學習並不是唯一的領域。微電腦計算能力的顯著提高意味著Python的嵌入式版本，如circuit itpython和MicroPython，在制造商中將越來越受歡迎</p><center><font size="4">IEEE 2019 Top Programming Languages Ranking</font></center><img src="https://i.imgur.com/yktZqZu.jpg" width="40%" height="40%"><br><h3 id="Python的特性"><a href="#Python的特性" class="headerlink" title="Python的特性"></a>Python的特性</h3><p>1）語法簡介，結構清晰，簡單易學，可以從簡單打印一句字串看出Python與C及Java編程語言的分別：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"Hello World!"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;studio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Hello World! !\n"</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hellow World!"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p>2）功能強大，資源豐富<br>    - 豐富的標準函式庫：機器學習、網頁、GUI、crawler、加密等<br>    - 龐大的第三方資源庫 (&gt; 12萬)：Numpy、Pandas、SciPy、Matplotib、wordcloud<br>    - 開源體系：世上最大的針對單一編程語言的計算生態</p><p>3）可擴展性及可移植性：對作業系統的良好兼容性</p><img src="https://i.imgur.com/nW0pYCY.png" width="60%" height="60%"><br><br><h2 id="第一個python程式"><a href="#第一個python程式" class="headerlink" title="第一個python程式"></a>第一個python程式</h2><br><h3 id="判斷變量num是否為正數"><a href="#判斷變量num是否為正數" class="headerlink" title="判斷變量num是否為正數"></a>判斷變量num是否為正數</h3><p>以下程式的執行思路：如果 num&gt;0，輸出: num是正數；否則，輸出:num可能是0，num也可能是負數</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判斷變量num是否是正數</span></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> sum &gt; <span class="number">0</span>:</span><br><span class="line">print(<span class="string">"num是正數"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">"num可能是0"</span>)</span><br><span class="line">print(<span class="string">"num也可能是負數"</span>)</span><br></pre></td></tr></table></figure><br><h3 id="注釋-amp-指定敘述-賦值-語句"><a href="#注釋-amp-指定敘述-賦值-語句" class="headerlink" title="注釋 &amp; 指定敘述(賦值)語句"></a>注釋 &amp; 指定敘述(賦值)語句</h3><p>注釋 comment：以”#”符號作為開首的語句，是對程序進行說明，在程式運行過程中不被執行</p><p>指定敘述(賦值)語句 assignment statement：將某一數值賦給某個變量的過程，所賦“值”可以是數字，也可以是字符等<br><img src="https://i.imgur.com/9E9rM65.png" width="50%" height="50%"><br><br></p><h3 id="條件語句-amp-打印語句"><a href="#條件語句-amp-打印語句" class="headerlink" title="條件語句 &amp; 打印語句"></a>條件語句 &amp; 打印語句</h3><img src="https://i.imgur.com/acqXzQ1.png" width="50%" height="50%"><p>條件語句 conditional statement：利用if-else以及num&gt;0作為條件判定</p><p>打印語句：使用print statement打印所要顯示的資料，當中包括了自動換行，因此使用時會每次打印一行<br><br></p><h3 id="縮排特性"><a href="#縮排特性" class="headerlink" title="縮排特性"></a>縮排特性</h3><p>以C語言為例：C編譯器是忽略縮進， 按照就近原則配對<br><img src="https://i.imgur.com/Xd42fth.png" width="50%" height="50%"></p><p>Python語句是直接通過程式碼的的縮排indentation(按一下tab鍵)來表示，在PEP8規範中， 規定語句塊的縮排為4個空格<br>按照縮進來識別語句塊，可以有效的避免其他語言中可能出現的錯誤配對問題：<br><img src="https://i.imgur.com/8mx3yYg.png" width="50%" height="50%"></p><p>常見的程式碼縮錯誤：使用了鍵盤上的tab鍵和空格鍵，造成縮排不一致：<br><img src="https://i.imgur.com/QtXS53x.png" width="50%" height="50%"></p><br><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>Python語句可以以分號結尾，不同的語句可以寫在同一行上，以分號隔開，因此以下的語句都是正確的<br><img src="https://i.imgur.com/a4sWUdU.png" width="15%" height="15%"><br><br><br></p><h2 id="輸入和輸出"><a href="#輸入和輸出" class="headerlink" title="輸入和輸出"></a>輸入和輸出</h2><br><h3 id="輸入function"><a href="#輸入function" class="headerlink" title="輸入function"></a>輸入function</h3><img src="https://i.imgur.com/7W3r2u8.png" align="left" width="50%" height="50%"><br><h3 id="接收使用者輸入"><a href="#接收使用者輸入" class="headerlink" title="接收使用者輸入"></a>接收使用者輸入</h3><img src="https://i.imgur.com/Z0s7jkJ.png" align="left" width="60%" height="60%"><br><p>注意數據類型是否一致<br><img src="https://i.imgur.com/Dm70cgz.png" align="left" width="70%" height="70%"></p><p>利用數據轉換函數轉換輸入的數據類型，從string字符轉換成integer整數，可解決問題</p><img src="https://i.imgur.com/nBiiHYC.png" align="left" width="50%" height="50%"><br><br><h3 id="格式化輸出"><a href="#格式化輸出" class="headerlink" title="格式化輸出"></a>格式化輸出</h3><img src="https://i.imgur.com/e45gyv5.png" align="left" width="50%" height="50%"><br><img src="https://i.imgur.com/aGToozm.png" align="left" width="50%" height="50%"><br><p>常用的格式化參數<br><img src="https://i.imgur.com/0qzStK5.png" align="left" width="70%" height="70%"><br><br></p><h2 id="數據類型、常量、變量"><a href="#數據類型、常量、變量" class="headerlink" title="數據類型、常量、變量"></a>數據類型、常量、變量</h2><p>Python中支持6種標準的數據類型：<br>數字(numbers)、字符串(string)、列表(list)、元組(tuple)、集合(set)、字典(dictionary)，我們先介紹基本的數字和字符串類型<br><br></p><h3 id="數字數據類型"><a href="#數字數據類型" class="headerlink" title="數字數據類型"></a>數字數據類型</h3><p>在數字(numbers)方面，常見的有：整數(integer)、浮點數(float)、布林(boolean)、複數(complex)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int_num = <span class="number">10</span>    <span class="comment">#int value</span></span><br><span class="line">float_num = <span class="number">10.2</span>    <span class="comment">#float value</span></span><br><span class="line">complex_num = <span class="number">3.14j</span>    <span class="comment">#complex value</span></span><br><span class="line">bool_num = <span class="literal">True</span>    <span class="comment">#boolean value: True = 1, False = 0</span></span><br></pre></td></tr></table></figure><br><h3 id="字符串數據類型"><a href="#字符串數據類型" class="headerlink" title="字符串數據類型"></a>字符串數據類型</h3><p>字符串被標識為引號中表示的連續字符集。 Python允許使用單引號或雙引號。字符串是不可變的序列數據類型，即每次對字符串進行任何更改時，都會創建全新的字符串對象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a_str = <span class="string">'Hello World'</span></span><br><span class="line">print(a_str)    <span class="comment">#output will be whole string. Hello World</span></span><br><span class="line">print(a_str[<span class="number">0</span>])    <span class="comment">#output will be first character. H</span></span><br><span class="line">print(a_str[<span class="number">0</span>:<span class="number">5</span>])    <span class="comment">#output will be first five characters. Hello</span></span><br></pre></td></tr></table></figure><br><h3 id="標識符"><a href="#標識符" class="headerlink" title="標識符"></a>標識符</h3><p>標識符(Identifier)是指:變量、函數、數組、文件、對象等的名稱<br>1）標識符的第1個字符必須是字母或下劃線，其他字符可以由字母、下劃線、或數字組成，標識符長度任意<br><img src="https://i.imgur.com/swZdSDy.png" width="70%" height="70%"><br>2）標識符是Case sensitive的：score和Score是不同的<br>3）在Python3中，標識符支持非英語字符，只要是Unicode字符集支持，的字符都可以，但建議盡量使用英文的標識符<br>4）在給標識符命名時，應該盡量采用有意義的標識符，方便閱讀及理解<br><br></p><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>常量(constant)可以為數字、字符串、布爾值、空值等（2，-10086，3.5， “Python” ，True、False，None ）<br>但Python中沒有命名常量，所以不能給常量起一個名字<br><br></p><h3 id="變量"><a href="#變量" class="headerlink" title="變量"></a>變量</h3><p>Python的變量(variable)不需要聲明(declare)，<br>其數據類型由所賦的值來決定，不同類型的數字型數據運算時，會自動的進行類型轉換<br>bool&lt;int&lt;float&lt;complex (自動的類型轉換，僅存在於數字型數據之間)<br><img src="https://i.imgur.com/hh9EMYN.png" width="60%" height="60%"><br><br></p><h2 id="運算符和表達式"><a href="#運算符和表達式" class="headerlink" title="運算符和表達式"></a>運算符和表達式</h2><p>運算符(Operator): 完成不同類型的常量、變量之間的運算<br>表達式(Expression): 由常量、變量和運算符組成<br><br></p><h3 id="算數運算符"><a href="#算數運算符" class="headerlink" title="算數運算符"></a>算數運算符</h3><p>Python的算數運算符：<br><img src="https://i.imgur.com/XXlch8T.png" width="60%" height="60%"></p><h3 id="邏輯運算符"><a href="#邏輯運算符" class="headerlink" title="邏輯運算符"></a>邏輯運算符</h3><p>Python的邏輯運算符：<br><img src="https://i.imgur.com/kp2V7h6.png" width="70%" height="70%"></p><h3 id="比較運算符"><a href="#比較運算符" class="headerlink" title="比較運算符"></a>比較運算符</h3><p>Python的比較運算符：<br><img src="https://i.imgur.com/AaNOlLj.png" width="60%" height="60%"></p><h3 id="成員運算符"><a href="#成員運算符" class="headerlink" title="成員運算符"></a>成員運算符</h3><p>Python的成員運算符：<br><img src="https://i.imgur.com/Y7yFKPC.png" width="65%" height="65%"><br><br></p><h2 id="程式控制流程"><a href="#程式控制流程" class="headerlink" title="程式控制流程"></a>程式控制流程</h2><img src="https://i.imgur.com/8Xt0hkj.png" width="65%" height="65%"><br><h2 id="條件式語句"><a href="#條件式語句" class="headerlink" title="條件式語句"></a>條件式語句</h2><p>Python的if else運作示範：<br><img src="https://i.imgur.com/V4RvVMG.png" width="65%" height="65%"><br><br></p><h2 id="循環語句"><a href="#循環語句" class="headerlink" title="循環語句"></a>循環語句</h2><p>循環結構：<br><img src="https://i.imgur.com/PsXz2Ha.png" width="35%" height="35%"></p><h3 id="while語句"><a href="#while語句" class="headerlink" title="while語句"></a>while語句</h3><img src="https://i.imgur.com/C4fmPm6.png" width="65%" height="65%"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 計算1至100的和</span></span><br><span class="line">i = <span class="number">1</span><span class="comment">#計數器的初值</span></span><br><span class="line">sum = <span class="number">0</span><span class="comment">#累加和初值</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">101</span>:<span class="comment">#complex value</span></span><br><span class="line">sum = i + sum   <span class="comment">#累加</span></span><br><span class="line">i = i + <span class="number">1</span>       <span class="comment">#計數器+1</span></span><br><span class="line">print(sum)<span class="comment">#輸出累加和</span></span><br></pre></td></tr></table></figure><p>執行結果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5050</span><br></pre></td></tr></table></figure><br><h3 id="for語句"><a href="#for語句" class="headerlink" title="for語句"></a>for語句</h3><img src="https://i.imgur.com/1CRH05A.png" width="65%" height="65%"><br><h3 id="range-函數"><a href="#range-函數" class="headerlink" title="range()函數"></a>range()函數</h3><img src="https://i.imgur.com/KS2LvkR.png" width="65%" height="65%"><br><p>使用range()函數及for loop執行1-100的累加和：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 計算1至100的和</span></span><br><span class="line">sum = <span class="number">0</span><span class="comment">#累加初值</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">101</span>):<span class="comment">#循環條件</span></span><br><span class="line">sum = i + sum       <span class="comment">#累加</span></span><br><span class="line">print(sum)            <span class="comment">#輸出累加和</span></span><br></pre></td></tr></table></figure><p>使用range()函數及for loop執行1-100的累加奇數和：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 計算1至100的奇數和</span></span><br><span class="line">sum = <span class="number">0</span><span class="comment">#累加初值</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>,<span class="number">2</span>):   <span class="comment">#循環條件</span></span><br><span class="line">sum = i + sum          <span class="comment">#累加</span></span><br><span class="line">print(sum)               <span class="comment">#輸出累加和</span></span><br></pre></td></tr></table></figure><br><h3 id="continue語句"><a href="#continue語句" class="headerlink" title="continue語句"></a>continue語句</h3><p>continue可以終止本次循環，開始下一次循環，例如以下計算1-100之間的所有單數(奇數)之和：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 計算1至100的奇數和</span></span><br><span class="line">sum = <span class="number">0</span><span class="comment">#累加初值</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):  <span class="comment">#循環條件</span></span><br><span class="line"><span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:  <span class="comment">#如果是雙數(偶數)，則跳過本次循環，不進行累加</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">sum = i + sum       <span class="comment">#累加</span></span><br><span class="line">print(sum)            <span class="comment">#輸出累加和</span></span><br></pre></td></tr></table></figure><p>執行結果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2500</span><br></pre></td></tr></table></figure><br><h3 id="break語句"><a href="#break語句" class="headerlink" title="break語句"></a>break語句</h3><p>break可以用來跳出循環體，結束循環。以下例子計算了1-100的累加和。若累計和超過3000，則終止計算，並輸出當前結果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span><span class="comment">#計數器數值</span></span><br><span class="line">sum = <span class="number">0</span><span class="comment">#累加初值</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">101</span>:</span><br><span class="line"><span class="keyword">if</span> sum &lt;= <span class="number">3000</span>:   <span class="comment">#循環條件</span></span><br><span class="line">sum = i + sum  <span class="comment">#累加</span></span><br><span class="line">i = i + <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>：    <span class="comment">#累計和&gt;3000，跳出循環</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">print(sum)  <span class="comment">#輸出累加和</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Tensorflow 2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>開發環境安裝 | 神經網絡與深度學習 | Tensorflow 2.0 系列 (1) | AI入門</title>
      <link href="/8_Tensorflow2_Intro.html"/>
      <url>/8_Tensorflow2_Intro.html</url>
      
        <content type="html"><![CDATA[<h2 id="開發環境介紹"><a href="#開發環境介紹" class="headerlink" title="開發環境介紹"></a>開發環境介紹</h2><p>在進行deep learning和machine learning教學前，我們需要配置相應的開發環境<br>在本系列中，我們將會使用Python 3 作為編程語言，以Tensorflow 2.0 作為開發框架，及利用Anaconda 3 的開發環境<br><img src="https://i.imgur.com/5mORwgA.png" width="70%" height="70%"></p><p><font size="4"><li>Python 3 </li></font></p><ol>- 結構簡單清晰，容易上手</ol> <ol>- 豐富的資料庫</ol><p><font size="4"><li>Tensorflow 2.0 </li></font></p><ol>- 高效的人工智能開源框架</ol><ol>- 隨著版本更新，大大減低了深度學習編程的門檻</ol><p><font size="4"><li>Anaconda 3</li></font></p><ol>- 一個用於科學計算的Python发行版</ol><ol>- 強大的環境管理，可以分開和切換不同項目所需要的不同版本的工具包</ol><br><h2 id="Anaconda的安裝和使用"><a href="#Anaconda的安裝和使用" class="headerlink" title="Anaconda的安裝和使用"></a>Anaconda的安裝和使用</h2><img src="https://i.imgur.com/WKYdSkP.png" align="left" width="20%" height="20%"><p>可直接於官方網站下載 <a href="https://www.anaconda.com/products/individual" target="_blank" rel="noopener">https://www.anaconda.com/products/individual</a> 支援Windows, MacOS, Linux系統<br><img src="https://i.imgur.com/gaoOLrn.png" align="left" width="70%" height="70%"></p><p>運行Anaconda Navigator啟動應用程式，到達以下界面，管理conda環境和python模組</p><img src="https://i.imgur.com/iol2cs3.png" align="left" width="70%" height="70%"><p><br><br></p><h2 id="運行第一句程式碼"><a href="#運行第一句程式碼" class="headerlink" title="運行第一句程式碼"></a>運行第一句程式碼</h2><p>Python有2種運行模式，第一種要介紹的是——單步直譯執行</p><p>首先進入點擊左側欄Envrionment進入環境管理頁面，點擊 base (root) 右側的 小三角 “Open Terminal”<br><img src="https://i.imgur.com/ZQwdB1f.png" align="left" width="100%" height="100%"></p><p>然後輸入python，激活python互動式命令的環境，出現Python提示符 &gt;&gt;&gt;<br>在提示符 &gt;&gt;&gt; 處, 寫入Python語句，可以嘗試打印字符或者算數運算，然後按Enter鍵輸出結果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 1+1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&apos;Hello Wold!&apos;)</span><br><span class="line">Hellow World!</span><br></pre></td></tr></table></figure><p>輸入exit()或quit()可退出互動式命令環境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; exit()</span><br></pre></td></tr></table></figure><img src="https://i.imgur.com/etdy4gz.png" align="left" width="70%" height="70%"><p>第二種要介紹的是——腳本文件模式<br>利用程式碼編輯器如Visual Studio, PyCharm，創建Python文件，寫入Python語句，儲存文件<br>在終端機中，使用Python+文件名的方式運行該文件，或直接在編輯器中運行文件，得到結果<br><img src="https://i.imgur.com/HQtQwEj.png" align="left" width="70%" height="70%"></p><br><h2 id="強大的編輯工具-Jupyter-Notebook"><a href="#強大的編輯工具-Jupyter-Notebook" class="headerlink" title="強大的編輯工具 Jupyter Notebook"></a>強大的編輯工具 Jupyter Notebook</h2><p>Anaconda 提供了一個非常便利的網頁版程式編輯工具 —— Jupter Notebook<br>他能夠用於程式的遠程訪問，屏蔽了不同系統間的顯示差異，便於程式碼共享<br>同時亦可以將程式碼、圖像、注釋、公式、圖形、運行結果整合在同一個文檔中，提高了程式碼的閱讀性<br>首先在Anaconda Home頁面的Jupter Notebook中按Launch運行，其後會有網頁彈出<br><img src="https://i.imgur.com/dzdZ0i4.png" align="left" width="20%" height="2fan0%"></p><p>可以利用右上角 New -&gt; folder 新增一個新文件夾，方便管理學習資源<br><img src="https://i.imgur.com/TgLeUDb.png" align="left" width="70%" height="70%"></p><p>在Jupyter Notebook中，是以Cell為基本單位的，即圖中的內容編輯區<br><img src="https://i.imgur.com/9CDhra5.png" align="left" width="70%" height="70%"></p><p>編輯程式碼,保存後會在目錄下產生一個 HelloWorld.ipynb 文件，並顯示在home頁面資料夾中<br><img src="https://i.imgur.com/9p1aRs0.png" align="left" width="70%" height="70%"></p><ol><li>在名稱區域內修改文件名稱 </li><li>在內容編輯區輸入程式碼</li><li>點擊運行按鈕</li><li>運行結果</li></ol><br><h2 id="安裝-Tensorflow-2-0"><a href="#安裝-Tensorflow-2-0" class="headerlink" title="安裝 Tensorflow 2.0"></a>安裝 Tensorflow 2.0</h2><p>首先我們要去到Anaconda中的Envrionment頁面，點擊列表下方的 Create 按鈕新增一個獨立的開發環境<br><img src="https://i.imgur.com/34OUbWK.png" align="left" width="50%" height="50%"></p><p>Name更改為 tensorflow 2 便可，選擇 3.7 Python 版本，等待新建<br><img src="https://i.imgur.com/AJWqXrD.png" align="left" width="50%" height="50%"></p><p>成功新建環境後，在 tensorflow2 中打開Terminal<br><img src="https://i.imgur.com/OYXcYLx.png" align="left" width="50%" height="50%"></p><p>輸入以下指令安裝軟件套件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install numpy matplotlib Pillow scikit-learn pandas</span><br></pre></td></tr></table></figure><p>輸入以下指令安裝TensorFlow 2.0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade tensorflow</span><br></pre></td></tr></table></figure><br><h2 id="測試Tensorflow-2-0"><a href="#測試Tensorflow-2-0" class="headerlink" title="測試Tensorflow 2.0"></a>測試Tensorflow 2.0</h2><p>在Termional中輸入python，進入python交互模式<br>輸入程式碼: import tensorflow as tf 或 import tensorflow，如果沒有報錯，則代表安裝成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br></pre></td></tr></table></figure><img src="https://i.imgur.com/nzFx8hb.png" align="left" width="70%" height="70%"><center><font size="4">安裝成功！</font></center>]]></content>
      
      
      <categories>
          
          <category> Tensorflow 2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
            <tag> TensorFlow </tag>
            
            <tag> Deep Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VPN簡介與應用 | 網絡安全 | 數據保護</title>
      <link href="/7_VPN_Fundamental.html"/>
      <url>/7_VPN_Fundamental.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><br><center><font size="4">近來香港不少人都開始留意網絡安全、數據傳輸和隱私的問題，對於VPN服務的需求亦倍增</font></center><center><font size="4">可能大家都聽說過甚至用過VPN，但是卻甚少人知道它的原理，那麼就藉這次機會與大家一同了解一下VPN</font></center><br><img src="https://i.imgur.com/WTNgxMl.jpg" width="75%" height="75%"><br><br><h2 id="VPN是甚麼"><a href="#VPN是甚麼" class="headerlink" title="VPN是甚麼"></a>VPN是甚麼</h2><p>VPN：英文全稱是“Virtual Private Network”，翻譯中文就是“虛擬私人網絡”。 VPN的應用主要有2種：</p><ol><li>讓世界上任意機器進入同一個虛擬的區域網絡中（加密的數據通訊）</li><li>翻牆<br></li></ol><p>在進一步了解虛擬私人網絡之前，我們先要認識「私人網絡」，因為VPN最早並不是用來翻牆的<br>如果你在一家跨國企業工作，公司電腦裡的的資料都是價值連城的商業秘密，若果一旦洩露，公司可能會受到巨大損失。因此，在公司內部，員工使用的互聯網其實是「專線網絡」，這種網絡和公司外面的公共網絡並不直接連接（或有嚴密的關卡），所以公司外的人（黑客）無法進入這個網絡。這樣一來便能確保公司的數據安全</p><img src="https://i.imgur.com/s1Ctbwu.png" width="70%" height="70%"><p>那麼問題來了：假如公司員工到外地出差，必須使用當地的網絡（如酒店的Wi-Fi）遠程工作，不可能用到公司的專線，如何保證網絡傳輸中的數據安全呢？這種情況下，公司會建議員工使用VPN。 VPN雖然不是「專線網絡」，卻是「虛擬專線網絡」，即是連了VPN以後，員工就算不在公司內部，上網時也可以相當於在公司內部上網。那麼VPN是如何實現這種效果的呢？</p><br><h2 id="VPN的基本原理"><a href="#VPN的基本原理" class="headerlink" title="VPN的基本原理"></a>VPN的基本原理</h2><p>讓我們以上面的例子繼續了解VPN的基本原理，對於出差的員工，公司的IT部門會在員工的電腦上裝上VPN軟件。這個VPN軟件可以連接到一台由公司內部控制的電腦伺服器上，叫「VPN伺服器」（VPN Server）。出差員工連上VPN以後，他上網時就不再直接訪問公共互聯網，而是通過VPN伺服器間接訪問<br><img src="https://i.imgur.com/HUxHM3A.png" width="50%" height="50%"></p><p>例如，有個員工打開Google，如果不用VPN，他的電腦就直接去連Google的網站。而開啟VPN以後，如果他想打開Google，他的電腦就不再是直接連接Google網站，而是去連接VPN伺服器，並給VPN伺服器发一條指令——「我要訪問Google」。伺服器接到指令後，VPN會以伺服器的身份去訪問Google，收到Google網頁的內容，再把內容回傳給他，這樣使用VPN的員工最終就能看到Google網站的內容了。也就是說，使用VPN時，這個員工的所有網上訪問都通過VPN伺服器代理完成的。</p><p>此外，VPN還有一個重要特點：VPN用戶和VPN伺服器之間的通訊是加密的，這樣就不會被黑客盜取或竊聽內容。情況類似兩個打電話，是有可能被第三方竊聽的，但是如果通話的兩個人使用的是別人都聽不懂的特殊語言（好比加密後的內容），那麽即使有人監聽，打電話的內容也不會被泄露。有了這些特點，我們就可以理解為什麽使用VPN能保證用戶的網絡安全：用戶所有的網絡訪問都不直接完成，而是通過VPN伺服器作為中間人傳遞內容，而用戶和VPN伺服器之間的所有連接都是加密的。這樣黑客就無法攔截破解VPN用戶的網絡訪問內容<br><br></p><h2 id="VPN的優點"><a href="#VPN的優點" class="headerlink" title="VPN的優點"></a>VPN的優點</h2><ol><li>跨地理性：位於A地的電腦可跟位於B地的電腦連接</li><li>安全性高：利用許多通訊加密協定來達到其高安全性</li><li>成本低廉：因為是在公用網路上建立，只要公用網路的價格，不用專線的實體工程費用</li></ol><br><h2 id="VPN涉及的主要技術"><a href="#VPN涉及的主要技術" class="headerlink" title="VPN涉及的主要技術"></a>VPN涉及的主要技術</h2><p>VPN的原理技術主要有四種：</p><ol><li>穿隧技術（Tunneling）</li><li>加密及解密技術（Encryption &amp; Decryption）</li><li>金鑰管理技術（Key management）</li><li>使用者與設備身分鑑別技術（Authentication）</li></ol><br><h3 id="穿隧技術（Tunneling）"><a href="#穿隧技術（Tunneling）" class="headerlink" title="穿隧技術（Tunneling）"></a>穿隧技術（Tunneling）</h3><p>穿隧技術較為簡單，其原理就是將你原本的封包(Packet)視為資料(Data)再重新封裝(Encapsulation)，變成新的封包傳輸在公用網絡中<br><img src="https://i.imgur.com/A2zbmVH.png" width="50%" height="50%"><br>Data：你要傳輸的資料內容<br>Header1：內含的 IP Address 是區域或虛擬網路的 IP，或是自訂的 Protocol<br>Hearder2：內含的 IP Address 是你要傳輸到對方的IP</p><p>穿隧技術所涉及的三種網絡協議： </p><ol><li>Carrier Protocol：用來在網際網路上傳遞封包用的協定</li><li>Encapsulation Protocol：用來包裝原本封包資料用的協定，也就是Header2所使用的協議。例如：GRE、IPSec、PPTP、L2TP….等</li><li>Passenger Protocol：原本封包資料所使用的協定，也就是Header1所使用的協議</li></ol><br><h3 id="加密及解密技術（Encryption-amp-Decryption"><a href="#加密及解密技術（Encryption-amp-Decryption" class="headerlink" title="加密及解密技術（Encryption &amp; Decryption)"></a>加密及解密技術（Encryption &amp; Decryption)</h3><p>主要加密的方法分有兩種：</p><ol><li><p>對稱加密（Symmetric-key algorithm）：又稱為私鑰加密、共享密鑰加密，是密碼學中的一類加密演算法。這類演算法在加密和解密時使用相同的密鑰，或是使用兩個可以簡單地相互推算的密鑰。這組密鑰成為在兩個或多個成員間的共同祕密，以便維持專屬的通訊聯繫。與公開密鑰加密相比，要求雙方取得相同的密鑰是對稱密鑰加密的主要缺點之一</p><img src="https://i.imgur.com/ydABSJS.png" width="50%" height="50%"><br><br></li><li><p>非對稱加密（asymmetric cryptography）：也稱為公開金鑰加密（Public-key cryptography），一種密碼學演算法類型。在這種密碼學方法中，需要一對金鑰，一是個私人金鑰，另一個則是公開金鑰。這兩個金鑰是數學相關，用某用戶金鑰加密後所得的資訊，只能用該用戶的解密金鑰才能解密。如果知道了其中一個，並不能計算出另外一個。因此如果公開了一對金鑰中的一個，並不會危害到另外一個的秘密性質。稱公開的金鑰為公鑰；不公開的金鑰為私鑰</p><img src="https://i.imgur.com/2QvodWr.jpg" width="40%" height="40%"><br><br></li></ol><h3 id="金鑰管理技術（Key-management）"><a href="#金鑰管理技術（Key-management）" class="headerlink" title="金鑰管理技術（Key management）"></a>金鑰管理技術（Key management）</h3><p>現行常用密鑰管理的技術又可分為SKIP(Simple Key management for IP)與ISAKMP/Oakley (又稱為IKE)兩種<br>SKIP(Simple Key Management for IP) 利用Diffee-Hellman演算法則， 應用在網路上傳輸密鑰的技術<br>ISAKMP/Oakley : Oakley定義如何分辨及確認密鑰，ISA KMP定義分配密鑰的方法</p><br><h3 id="使用者與設備身分鑑別技術（Authentication）"><a href="#使用者與設備身分鑑別技術（Authentication）" class="headerlink" title="使用者與設備身分鑑別技術（Authentication）"></a>使用者與設備身分鑑別技術（Authentication）</h3><p>這部分是為了確認跟你連接或你所連接VPN對方的身分是不是本人所建立起的機制，主要分為兩種：</p><ol><li>使用者身分鑑別部分：使用者名稱跟密碼、IC卡鑑別‧‧‧等</li><li>設備身分鑑別部分：CA的X.509憑證、分享金鑰</li></ol><br><h2 id="VPN的應用"><a href="#VPN的應用" class="headerlink" title="VPN的應用"></a>VPN的應用</h2><h3 id="VPN主要的應用層面"><a href="#VPN主要的應用層面" class="headerlink" title="VPN主要的應用層面"></a>VPN主要的應用層面</h3><p>VPN能夠裝置的網絡連線先透過加密連接 VPN 伺服器，然後再連接到目標，從而讓自己的真正 IP 得以隱藏。IP 可以反映出用家的實際位置，甚至用於記錄用家的瀏覽記錄。因此如果可以隱藏 IP，無論電訊商或者目標網站，要收集瀏覽者的資訊就更加困難<br>而主要的應用有以下五點：</p><ol><li>解除地域屏蔽：由於網站審查或地區屏蔽的原因，用家的網絡行為可能會受到限制，VPN能夠規避數字障礙，解除網絡限制</li><li>保護隱私：使用VPN能夠以更安全、匿名的 IP 隱藏所有在線活動，避免第三方監督的情況出現</li><li>加密數據：數據泄露可能導致財務損失和勒索等，使用數據加密能夠讓用家的數據免受數據泄露和失竊的影響   </li><li>串流內容：ISP會限制數據以節省帶寬。VPN能夠使用家繞過 ISP 限制，或能夠體驗流暢的高清和4K串流體驗</li><li>安全銀行：黑客總是在尋找網上銀行或購物交易以便輕松賺錢。使用VPN能夠可保障用家的安全交易</li></ol><br><h3 id="VPN的實際使用"><a href="#VPN的實際使用" class="headerlink" title="VPN的實際使用"></a>VPN的實際使用</h3><p>對於VPN的實際使用，網上已有不同軟件的教學示範，這裡就不多作演示<br>但在使用時，用家需留意其服務的範圍和功能，如有網站評測發現一些軟件的服務涵蓋被誤解：詳情請<a href="https://unwire.hk/2019/10/03/warpvpncaution/tech-secure/" target="_blank" rel="noopener"><font color="red" size="3">按此</font></a><br>例如基於WARP VPN的1.1.1.1軟件，目標只為增加連線的安全線並非給用戶「隱身」而設。因此，當用戶連接對方網站時，用戶的 IP 位址依然有機會讓對方看到。而該軟件開發公司Cloudflare亦曾介紹：<br>「其實 WARP 服務在官方網站亦向用戶介紹，此服務的設計並非讓你連接原國家／地區的內容服務，它或不能隱藏你的 IP 網址；網頁寫明如用戶需要更強保護性能，建議用戶使用傳統 VPN 或 Tor 等增強網絡隱身能力的服務。」<br><img src="https://i.imgur.com/AYcqaJb.png" width="40%" height="40%"><br><br><br><font color="#000000" size="5">更多關於網絡安全的資訊如VPN協議等會於日後補充</font><br><font color="#000000" size="5">最後仍然建議用家能夠多閱讀評測，及對比不同軟件的產品服務範圍</font><br><font color="#000000" size="5">以便更好地使用其VPN功能</font><br><font color="#000000" size="5">可供參考的評測網站：<a href="https://unwire.hk/tag/vpn/" target="_blank" rel="noopener">https://unwire.hk/tag/vpn/</a></font></p><p>文章參考：</p><p><a href="https://sites.google.com/site/vpnjianjieyuqiyingyong/home" target="_blank" rel="noopener">https://sites.google.com/site/vpnjianjieyuqiyingyong/home</a></p><p><a href="http://godleon.blogspot.com/2007/05/vpn-vpnvirtual-private-network-vpn.html" target="_blank" rel="noopener">http://godleon.blogspot.com/2007/05/vpn-vpnvirtual-private-network-vpn.html</a></p><p><a href="https://en.wikipedia.org/wiki/Virtual_private_network" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Virtual_private_network</a></p>]]></content>
      
      
      <categories>
          
          <category> Networking </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPN </tag>
            
            <tag> Networking </tag>
            
            <tag> Personal Privacy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新手也會用AI | 訓練屬於自己的模型 | 自訂物件識別 | 人工智能 | TensorFlow</title>
      <link href="/3_CustomObjectReconition.html"/>
      <url>/3_CustomObjectReconition.html</url>
      
        <content type="html"><![CDATA[<h2 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h2><p>在上一篇入門AI物件識別介紹當中，我們嘗試透過使用Tensorflow提供的模型來進行物件檢測與識別。<br>我們也會發現，其模型並不能準確分辨每種物件。可否有一套自己的AI模型識別自己想檢測的物件呢？<br>這次，我們將會訓練自己的一套模型，專門檢測你想識別的東西！訓練自己的模型！</p><img src="https://i.imgur.com/P6G6mJD.png" width="70%" height="70%"><!-- ![想要完成以上效果嗎？其實並不難！](https://i.imgur.com/DhCdMuM.jpg)--><br><br><h2 id="環境配置"><a href="#環境配置" class="headerlink" title="環境配置"></a>環境配置</h2><h3 id="下載圖片標籤工具"><a href="#下載圖片標籤工具" class="headerlink" title="下載圖片標籤工具"></a>下載圖片標籤工具</h3><p>首先，在Github下載並安裝圖片標籤工具 <a href="https://github.com/tzutalin/labelImg" target="_blank" rel="noopener">https://github.com/tzutalin/labelImg</a><br>根據裝置安裝PyQt5，因為標籤工具需要Python3 + PyQt5的配置，詳情參考上面網頁，下面也會提供代碼</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install PyQt5</span><br></pre></td></tr></table></figure><p>它可以讓我們標籤不同的物件，來告訴電腦這些圖片中的物件是什麼，再讓電腦慢慢學習<br>最後，讓電腦在一張它沒見過的照片當中識別出物件，再反饋告訴我們，這就機器學習中的監督學習(supervised learning)<br><img src="https://raw.githubusercontent.com/tzutalin/labelImg/master/demo/demo3.jpg" width="50%" height="50%"></p><h3 id="安裝pandas"><a href="#安裝pandas" class="headerlink" title="安裝pandas"></a>安裝pandas</h3><p>Pandas 是python 的一個數據分析庫，為用戶提供高效能、簡易使用的資料格式，讓使用者可以快速操作及分析資料</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pandas</span><br></pre></td></tr></table></figure><br><h3 id="準備工作環境"><a href="#準備工作環境" class="headerlink" title="準備工作環境"></a>準備工作環境</h3><p>如果你有一直跟著上一集的教程，那麼你將會有著與我類似的資料夾配置<br>此時你需要在新建一個名為workspace的資料夾，目錄內再新建training_demo資料夾，工作環境如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">TensorFlow</span><br><span class="line">├─ models</span><br><span class="line">│   ├─ official</span><br><span class="line">│   ├─ research</span><br><span class="line">│   ├─ samples</span><br><span class="line">│   └─ tutorials</span><br><span class="line">└─ workspace</span><br><span class="line">    └─ training_demo</span><br></pre></td></tr></table></figure><p>在training_demo資料夾內，我們會準備自訂的圖片和文件，作為訓練模型之用，因此我們需要準備目錄內的工作環境：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">training_demo</span><br><span class="line">├─ annotations</span><br><span class="line">├─ images</span><br><span class="line">│   ├─ test</span><br><span class="line">│   └─ train</span><br><span class="line">├─ pre-trained-model</span><br><span class="line">└─ training</span><br></pre></td></tr></table></figure><table><tr><td>關於以上各項資料夾用途的解釋：<br>annotations: 儲存 .csv 文件以及Tensorflow的 .record 文件，包含著我們所提供的圖片的注釋<br>images: 包含著我們訓練模型所使用的圖片，和相對應的 .xml 文件(labelImg標籤後產生的文件)<br>test/train: 我們會把80%的圖片放進train文件裡訓練模型，其餘20%的圖片則會分類為test，目的是測試以及提高模型準確度<br>pre-trained-model: 包含著我們使用訓練新模型所使用的原模型<br>training: 儲存著我們訓練模型所產生的的文件，配置文件 .config 以及 .pbtxt 標籤地圖文件<br></td></tr></table><br><h3 id="下載圖片"><a href="#下載圖片" class="headerlink" title="下載圖片"></a>下載圖片</h3><p>為每種(1種也可)物品準備25張圖片，把其中20張(80%)放進train文件夾，其餘5張(20%)放進test文件夾<br><br></p><h2 id="使用labelImg工具標籤圖片"><a href="#使用labelImg工具標籤圖片" class="headerlink" title="使用labelImg工具標籤圖片"></a>使用labelImg工具標籤圖片</h2><h3 id="運行labelImg工具並打開目錄"><a href="#運行labelImg工具並打開目錄" class="headerlink" title="運行labelImg工具並打開目錄"></a>運行labelImg工具並打開目錄</h3><p>運行先前安裝好的LabelImg圖片標籤軟件，分別在程式內打開(Open Dir) train和test目錄，並且對圖片進行標籤<br><img src="https://i.imgur.com/Sl32ppe.png" width="75%" height="75%"><br><br></p><h3 id="對圖片進行標籤"><a href="#對圖片進行標籤" class="headerlink" title="對圖片進行標籤"></a>對圖片進行標籤</h3><p>接著就可以標籤圖片中的物件了，建立方框並打上label名稱，再手動保存 .xml檔就可以了，每張圖片都需重複以上步驟<br>這裡推薦大家使用快捷鍵:   w (建立方框) ， Crtl+S / Command+S (保存) ，  d (下一張圖片)<br>標籤完所有圖片之後，我們就會發現train和test目錄下的每張圖片都有它所對應的.xml文檔<br><img src="https://i.imgur.com/wWFPq9l.png" width="75%" height="75%"><br><br></p><h2 id="創建Label-map標籤地圖"><a href="#創建Label-map標籤地圖" class="headerlink" title="創建Label map標籤地圖"></a>創建Label map標籤地圖</h2><p>Tensorflow需要標籤地圖(label map)作為標記物件名稱，這裡創造一個label_map.pbtxt文件<br>內容按自己定義的物件修改，示範代碼如下，然後將文件放入 training_demo\annotations 目錄下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">item &#123;</span><br><span class="line">    id: 1</span><br><span class="line">    name: &apos;Garen&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">item &#123;</span><br><span class="line">    id: 2</span><br><span class="line">    name: &apos;Darius&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="創建TensorFlow-Records"><a href="#創建TensorFlow-Records" class="headerlink" title="創建TensorFlow Records"></a>創建TensorFlow Records</h2><p>這裡有2個步驟，分別是：<br>1）將獨立的 .xml檔案轉換為 .csv 用作數據集用途<br>2）把 .csv文件轉換為TFRecord格式的 .record文件<br>要完成上列2步，需要寫2個獨立的代碼文件<br>為方便管理資料夾，我們新建一個名為scripts的文件夾，裡面包括preprocessing資料夾，然後開始寫代碼吧！<br><br></p><h3 id="xml-to-csv-文件轉換"><a href="#xml-to-csv-文件轉換" class="headerlink" title=".xml to .csv 文件轉換"></a>.xml to .csv 文件轉換</h3><p>簡單寫一個python文件，名為 xml_to_csv.py ，下面會提供（可直接複製），然後把它放在scripts\preprocessing目錄下<br>它的功能是分別把images\train 及 images\test 內的.xml文件都轉換為各自的 .csv文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xml_to_csv</span><span class="params">(path)</span>:</span></span><br><span class="line">    <span class="string">"""Iterates through all .xml files (generated by labelImg) in a given directory and combines them in a single Pandas datagrame.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Parameters:</span></span><br><span class="line"><span class="string">    ----------</span></span><br><span class="line"><span class="string">    path : &#123;str&#125;</span></span><br><span class="line"><span class="string">        The path containing the .xml files</span></span><br><span class="line"><span class="string">    Returns</span></span><br><span class="line"><span class="string">    -------</span></span><br><span class="line"><span class="string">    Pandas DataFrame</span></span><br><span class="line"><span class="string">        The produced dataframe</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    xml_list = []</span><br><span class="line">    <span class="keyword">for</span> xml_file <span class="keyword">in</span> glob.glob(path + <span class="string">'/*.xml'</span>):</span><br><span class="line">        tree = ET.parse(xml_file)</span><br><span class="line">        root = tree.getroot()</span><br><span class="line">        <span class="keyword">for</span> member <span class="keyword">in</span> root.findall(<span class="string">'object'</span>):</span><br><span class="line">            value = (root.find(<span class="string">'filename'</span>).text,</span><br><span class="line">                    int(root.find(<span class="string">'size'</span>)[<span class="number">0</span>].text),</span><br><span class="line">                    int(root.find(<span class="string">'size'</span>)[<span class="number">1</span>].text),</span><br><span class="line">                    member[<span class="number">0</span>].text,</span><br><span class="line">                    int(member[<span class="number">4</span>][<span class="number">0</span>].text),</span><br><span class="line">                    int(member[<span class="number">4</span>][<span class="number">1</span>].text),</span><br><span class="line">                    int(member[<span class="number">4</span>][<span class="number">2</span>].text),</span><br><span class="line">                    int(member[<span class="number">4</span>][<span class="number">3</span>].text)</span><br><span class="line">                    )</span><br><span class="line">            xml_list.append(value)</span><br><span class="line">    column_name = [<span class="string">'filename'</span>, <span class="string">'width'</span>, <span class="string">'height'</span>,</span><br><span class="line">                <span class="string">'class'</span>, <span class="string">'xmin'</span>, <span class="string">'ymin'</span>, <span class="string">'xmax'</span>, <span class="string">'ymax'</span>]</span><br><span class="line">    xml_df = pd.DataFrame(xml_list, columns=column_name)</span><br><span class="line">    <span class="keyword">return</span> xml_df</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># Initiate argument parser</span></span><br><span class="line">    parser = argparse.ArgumentParser(</span><br><span class="line">        description=<span class="string">"Sample TensorFlow XML-to-CSV converter"</span>)</span><br><span class="line">    parser.add_argument(<span class="string">"-i"</span>,</span><br><span class="line">                        <span class="string">"--inputDir"</span>,</span><br><span class="line">                        help=<span class="string">"Path to the folder where the input .xml files are stored"</span>,</span><br><span class="line">                        type=str)</span><br><span class="line">    parser.add_argument(<span class="string">"-o"</span>,</span><br><span class="line">                        <span class="string">"--outputFile"</span>,</span><br><span class="line">                        help=<span class="string">"Name of output .csv file (including path)"</span>, type=str)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(args.inputDir <span class="keyword">is</span> <span class="literal">None</span>):</span><br><span class="line">        args.inputDir = os.getcwd()</span><br><span class="line">    <span class="keyword">if</span>(args.outputFile <span class="keyword">is</span> <span class="literal">None</span>):</span><br><span class="line">        args.outputFile = args.inputDir + <span class="string">"/labels.csv"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span>(os.path.isdir(args.inputDir))</span><br><span class="line"></span><br><span class="line">    xml_df = xml_to_csv(args.inputDir)</span><br><span class="line">    xml_df.to_csv(</span><br><span class="line">        args.outputFile, index=<span class="literal">None</span>)</span><br><span class="line">    print(<span class="string">'Successfully converted xml to csv.'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><br><p>下一步，開啟終端機，cd到TensorFlow/scripts/preprocessing目錄下，Windows用戶根據以下2行代碼運行xml_to_csv.py文件<br>[PATH_TO_IMAGES_FOLDER]是images資料夾的根目錄，[PATH_TO_ANNOTATIONS_FOLDER]則是annotations資料夾的根目錄</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">python3 xml_to_csv.py -i [PATH_TO_IMAGES_FOLDER]\train -o [PATH_TO_ANNOTATIONS_FOLDER]\train_labels.csv</span><br><span class="line"></span><br><span class="line">python3 xml_to_csv.py -i [PATH_TO_IMAGES_FOLDER]\test -o [PATH_TO_ANNOTATIONS_FOLDER]\test_labels.csv</span><br><span class="line"></span><br><span class="line"># 舉個例子 For example:</span><br><span class="line">python3 xml_to_csv.py -i C:\Users\sglvladi\Documents\TensorFlow\workspace\training_demo\images\train -o C:\Users\sglvladi\Documents\TensorFlow\workspace\training_demo\annotations\train_labels.csv</span><br><span class="line">python3 xml_to_csv.py -i C:\Users\sglvladi\Documents\TensorFlow\workspace\training_demo\images\test -o C:\Users\sglvladi\Documents\TensorFlow\workspace\training_demo\annotations\test_labels.csv</span><br></pre></td></tr></table></figure><br><p>MacOS以及Linux用戶的代碼類似，只是 “/“ 和 “\“ 的符號不同，這邊也給大家提供我的代碼作參考</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#Linux</span><br><span class="line">python3 xml_to_csv.py -i /home/icthk/Desktop/Tensorflow/workspace/training_demo/images/train -o /home/icthk/Desktop/hi/workspace/training_demo/annotations/train_labels.csv</span><br><span class="line">python3 xml_to_csv.py -i /home/icthk/Desktop/Tensorflow/workspace/training_demo/images/test -o /home/icthk/Desktop/hi/workspace/training_demo/annotations/test_labels.csv</span><br><span class="line"></span><br><span class="line">#Mac</span><br><span class="line">python3 xml_to_csv.py -i /Users/icthk/Desktop/Tensorflow/workspace/training_demo/images/train -o /Users/icthk/Desktop/Tensorflow/workspace/training_demo/annotations/train_labels.csv</span><br><span class="line">python3 xml_to_csv.py -i /Users/icthk/Desktop/Tensorflow/workspace/training_demo/images/test -o /Users/icthk/Desktop/Tensorflow/workspace/training_demo/annotations/test_labels.csv</span><br></pre></td></tr></table></figure><p>當上步驟完成後，2個新文件分別是 test_labels.csv 和 train_labels.csv 將會出現在 training_demo\annotations 資料夾內<br><br></p><h3 id="csv-to-record-文件轉換"><a href="#csv-to-record-文件轉換" class="headerlink" title=".csv to .record 文件轉換"></a>.csv to .record 文件轉換</h3><p>現在我們有了 .csv 格式的注釋文件，接下來就要把他們轉換為TFRecords<br>在 scripts\preprocessing 建立另一個新的文件，命名為generate_tfrecord.py    ，代碼如下<br><font color="blue" size="5">注意！這裡的31-34行代碼需要根據用戶需要作調整，請仔細查看代碼中的注釋！</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">"../../models/research"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> object_detection.utils <span class="keyword">import</span> dataset_util</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple, OrderedDict</span><br><span class="line"></span><br><span class="line">flags = tf.app.flags</span><br><span class="line">flags.DEFINE_string(<span class="string">'csv_input'</span>, <span class="string">''</span>, <span class="string">'Path to the CSV input'</span>)</span><br><span class="line">flags.DEFINE_string(<span class="string">'output_path'</span>, <span class="string">''</span>, <span class="string">'Path to output TFRecord'</span>)</span><br><span class="line">flags.DEFINE_string(<span class="string">'label'</span>, <span class="string">''</span>, <span class="string">'Name of class label'</span>)</span><br><span class="line"><span class="comment"># if your image has more labels input them as ，若一張圖片內注釋了多個標籤，請使用以下代碼</span></span><br><span class="line"><span class="comment"># flags.DEFINE_string('label0', '', 'Name of class[0] label')</span></span><br><span class="line"><span class="comment"># flags.DEFINE_string('label1', '', 'Name of class[1] label')</span></span><br><span class="line"><span class="comment"># and so on.</span></span><br><span class="line">flags.DEFINE_string(<span class="string">'img_path'</span>, <span class="string">''</span>, <span class="string">'Path to images'</span>)</span><br><span class="line">FLAGS = flags.FLAGS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># TO-DO replace this with label map</span></span><br><span class="line"><span class="comment"># for multiple labels add more else if statements</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">class_text_to_int</span><span class="params">(row_label)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> row_label == <span class="string">'Garen'</span>:  <span class="comment"># '標籤物件1':</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">     <span class="keyword">elif</span> row_label == <span class="string">'Darius'</span>: <span class="comment"># '標籤物件2': ***若只有一個標籤物件則刪除33-34行</span></span><br><span class="line">     <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    <span class="comment"># comment upper if statement and uncomment these statements for multiple labelling</span></span><br><span class="line">    <span class="comment"># if row_label == FLAGS.label0:</span></span><br><span class="line">    <span class="comment">#   return 1</span></span><br><span class="line">    <span class="comment"># elif row_label == FLAGS.label1:</span></span><br><span class="line">    <span class="comment">#   return 0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split</span><span class="params">(df, group)</span>:</span></span><br><span class="line">    data = namedtuple(<span class="string">'data'</span>, [<span class="string">'filename'</span>, <span class="string">'object'</span>])</span><br><span class="line">    gb = df.groupby(group)</span><br><span class="line">    <span class="keyword">return</span> [data(filename, gb.get_group(x)) <span class="keyword">for</span> filename, x <span class="keyword">in</span> zip(gb.groups.keys(), gb.groups)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_tf_example</span><span class="params">(group, path)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> tf.gfile.GFile(os.path.join(path, <span class="string">'&#123;&#125;'</span>.format(group.filename)), <span class="string">'rb'</span>) <span class="keyword">as</span> fid:</span><br><span class="line">        encoded_jpg = fid.read()</span><br><span class="line">    encoded_jpg_io = io.BytesIO(encoded_jpg)</span><br><span class="line">    image = Image.open(encoded_jpg_io)</span><br><span class="line">    width, height = image.size</span><br><span class="line"></span><br><span class="line">    filename = group.filename.encode(<span class="string">'utf8'</span>)</span><br><span class="line">    image_format = <span class="string">b'jpg'</span></span><br><span class="line">    <span class="comment"># check if the image format is matching with your images.</span></span><br><span class="line">    xmins = []</span><br><span class="line">    xmaxs = []</span><br><span class="line">    ymins = []</span><br><span class="line">    ymaxs = []</span><br><span class="line">    classes_text = []</span><br><span class="line">    classes = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> index, row <span class="keyword">in</span> group.object.iterrows():</span><br><span class="line">        xmins.append(row[<span class="string">'xmin'</span>] / width)</span><br><span class="line">        xmaxs.append(row[<span class="string">'xmax'</span>] / width)</span><br><span class="line">        ymins.append(row[<span class="string">'ymin'</span>] / height)</span><br><span class="line">        ymaxs.append(row[<span class="string">'ymax'</span>] / height)</span><br><span class="line">        classes_text.append(row[<span class="string">'class'</span>].encode(<span class="string">'utf8'</span>))</span><br><span class="line">        classes.append(class_text_to_int(row[<span class="string">'class'</span>]))</span><br><span class="line"></span><br><span class="line">    tf_example = tf.train.Example(features=tf.train.Features(feature=&#123;</span><br><span class="line">        <span class="string">'image/height'</span>: dataset_util.int64_feature(height),</span><br><span class="line">        <span class="string">'image/width'</span>: dataset_util.int64_feature(width),</span><br><span class="line">        <span class="string">'image/filename'</span>: dataset_util.bytes_feature(filename),</span><br><span class="line">        <span class="string">'image/source_id'</span>: dataset_util.bytes_feature(filename),</span><br><span class="line">        <span class="string">'image/encoded'</span>: dataset_util.bytes_feature(encoded_jpg),</span><br><span class="line">        <span class="string">'image/format'</span>: dataset_util.bytes_feature(image_format),</span><br><span class="line">        <span class="string">'image/object/bbox/xmin'</span>: dataset_util.float_list_feature(xmins),</span><br><span class="line">        <span class="string">'image/object/bbox/xmax'</span>: dataset_util.float_list_feature(xmaxs),</span><br><span class="line">        <span class="string">'image/object/bbox/ymin'</span>: dataset_util.float_list_feature(ymins),</span><br><span class="line">        <span class="string">'image/object/bbox/ymax'</span>: dataset_util.float_list_feature(ymaxs),</span><br><span class="line">        <span class="string">'image/object/class/text'</span>: dataset_util.bytes_list_feature(classes_text),</span><br><span class="line">        <span class="string">'image/object/class/label'</span>: dataset_util.int64_list_feature(classes),</span><br><span class="line">    &#125;))</span><br><span class="line">    <span class="keyword">return</span> tf_example</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(_)</span>:</span></span><br><span class="line">    writer = tf.python_io.TFRecordWriter(FLAGS.output_path)</span><br><span class="line">    path = os.path.join(os.getcwd(), FLAGS.img_path)</span><br><span class="line">    examples = pd.read_csv(FLAGS.csv_input)</span><br><span class="line">    grouped = split(examples, <span class="string">'filename'</span>)</span><br><span class="line">    <span class="keyword">for</span> group <span class="keyword">in</span> grouped:</span><br><span class="line">        tf_example = create_tf_example(group, path)</span><br><span class="line">        writer.write(tf_example.SerializeToString())</span><br><span class="line"></span><br><span class="line">    writer.close()</span><br><span class="line">    output_path = os.path.join(os.getcwd(), FLAGS.output_path)</span><br><span class="line">    print(<span class="string">'Successfully created the TFRecords: &#123;&#125;'</span>.format(output_path))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    tf.app.run()</span><br></pre></td></tr></table></figure><br><p>然後做法與上個文件類似，我們cd到 TensorFlow\scripts\preprocessing 目錄下運行以下代碼：<br>[PATH_TO_ANNOTATIONS_FOLDER]是annotations資料夾的根目錄，[PATH_TO_IMAGES_FOLDER]是images資料夾的根目錄<br>運行代碼稍微會有點長，建議開啟記事本編輯作參考，Windows用戶代碼參考：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">python3 generate_tfrecord.py  --csv_input=&lt;PATH_TO_ANNOTATIONS_FOLDER&gt;\train_labels.csv --img_path=&lt;PATH_TO_IMAGES_FOLDER&gt;\train  --output_path=&lt;PATH_TO_ANNOTATIONS_FOLDER&gt;\train.record</span><br><span class="line"></span><br><span class="line">python3 generate_tfrecord.py --csv_input=&lt;PATH_TO_ANNOTATIONS_FOLDER&gt;\test_labels.csv --img_path=&lt;PATH_TO_IMAGES_FOLDER&gt;\test --output_path=&lt;PATH_TO_ANNOTATIONS_FOLDER&gt;\test.record</span><br><span class="line"></span><br><span class="line"># 舉個例子 For example:</span><br><span class="line">python3 generate_tfrecord.py --csv_input=C:\Users\sglvladi\Documents\TensorFlow\workspace\training_demo\annotations\train_labels.csv --output_path=C:\Users\sglvladi\Documents\TensorFlow\workspace\training_demo\annotations\train.record --img_path=C:\Users\sglvladi\Documents\TensorFlow\workspace\training_demo\images\train</span><br><span class="line">python3 generate_tfrecord.py --csv_input=C:\Users\sglvladi\Documents\TensorFlow\workspace\training_demo\annotations\test_labels.csv --output_path=C:\Users\sglvladi\Documents\TensorFlow\workspace\training_demo\annotations\test.record --img_path=C:\Users\sglvladi\Documents\TensorFlow\workspace\training_demo\images\test</span><br></pre></td></tr></table></figure><p>MacOS以及Linux用戶代碼參考：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#Linux</span><br><span class="line">python3 generate_tfrecord.py --csv_input=/home/icthk/Desktop/Tensorflow/workspace/training_demo/annotations/train_labels.csv --output_path=/home/icthk/Desktop/Tensorflow/workspace/training_demo/annotations/train.record --img_path=/home/icthk/Desktop/Tensorflow/workspace/training_demo/images/train</span><br><span class="line">python3 generate_tfrecord.py --csv_input=/home/icthk/Desktop/Tensorflow/workspace/training_demo/annotations/test_labels.csv --output_path=/home/icthk/Desktop/Tensorflow/workspace/training_demo/annotations/test.record --img_path=/home/icthk/Desktop/Tensorflow/workspace/training_demo/images/test</span><br><span class="line"></span><br><span class="line">#MacOS</span><br><span class="line">python3 generate_tfrecord.py --csv_input=/Users/icthk/Desktop/Tensorflow/workspace/training_demo/annotations/train_labels.csv --output_path=/Users/icthk/Desktop/Tensorflow/workspace/training_demo/annotations/train.record --img_path=/Users/icthk/Desktop/Tensorflow/workspace/training_demo/images/train</span><br><span class="line">python3 generate_tfrecord.py --csv_input=/Users/icthk/Desktop/Tensorflow/workspace/training_demo/annotations/test_labels.csv --output_path=/Users/icthk/Desktop/Tensorflow/workspace/training_demo/annotations/test.record --img_path=/Users/icthk/Desktop/Tensorflow/workspace/training_demo/images/test</span><br></pre></td></tr></table></figure><p>運行成功後，2個新文件test.record 和 train.record 將會在training_demo\annotations資料夾內生成<br><br></p><h2 id="設定訓練配置"><a href="#設定訓練配置" class="headerlink" title="設定訓練配置"></a>設定訓練配置</h2><h3 id="下載原模型資料夾"><a href="#下載原模型資料夾" class="headerlink" title="下載原模型資料夾"></a>下載原模型資料夾</h3><p>下一步，我們將會使用TensorFlow提供的原模型訓練自訂模型，這裡使用的是ssd_inception_v2_coco模型<br>因為它在準確度和回饋速度中取得一個較好的平衡，當然也有其他選擇，詳情請參考<a href="https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/detection_model_zoo.md" target="_blank" rel="noopener">Detection Model Zoo</a><br>來到<a href="https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/detection_model_zoo.md" target="_blank" rel="noopener">Detection Model Zoo</a>尋找ssd_inception_v2_coco並點擊進行下載，下載好解壓放到 training_demo\pre-trained-model 目錄下</p><table><td><img src="https://i.imgur.com/zPaFvYN.png" width="50%" height="50%"></td><td><img src="https://i.imgur.com/7dLiOsq.png" width="50%" height="50%"></td></table><br><h3 id="設定原模型配置文件"><a href="#設定原模型配置文件" class="headerlink" title="設定原模型配置文件"></a>設定原模型配置文件</h3><p>到training_demo/training 目錄下，新建原模型配置文件，貼上以下代碼, 命名為 ssd_inception_v2_coco.config<br><font color="blue" size="5">注意！第9、77、136行代碼需要根據用戶需要作調整，請仔細查看代碼中的注釋！</font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"># SSD with Inception v2 configuration for MSCOCO Dataset.</span><br><span class="line"># Users should configure the fine_tune_checkpoint field in the train config as</span><br><span class="line"># well as the label_map_path and input_path fields in the train_input_reader and</span><br><span class="line"># eval_input_reader. Search for &quot;PATH_TO_BE_CONFIGURED&quot; to find the fields that</span><br><span class="line"># should be configured.</span><br><span class="line"></span><br><span class="line">model &#123;</span><br><span class="line">    ssd &#123;</span><br><span class="line">        num_classes: 2   # 標籤數目 Set this to the number of different label classes</span><br><span class="line">        box_coder &#123;</span><br><span class="line">            faster_rcnn_box_coder &#123;</span><br><span class="line">                y_scale: 10.0</span><br><span class="line">                x_scale: 10.0</span><br><span class="line">                height_scale: 5.0</span><br><span class="line">                width_scale: 5.0</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        matcher &#123;</span><br><span class="line">            argmax_matcher &#123;</span><br><span class="line">                matched_threshold: 0.5</span><br><span class="line">                unmatched_threshold: 0.5</span><br><span class="line">                ignore_thresholds: false</span><br><span class="line">                negatives_lower_than_unmatched: true</span><br><span class="line">                force_match_for_each_row: true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        similarity_calculator &#123;</span><br><span class="line">            iou_similarity &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        anchor_generator &#123;</span><br><span class="line">            ssd_anchor_generator &#123;</span><br><span class="line">                num_layers: 6</span><br><span class="line">                min_scale: 0.2</span><br><span class="line">                max_scale: 0.95</span><br><span class="line">                aspect_ratios: 1.0</span><br><span class="line">                aspect_ratios: 2.0</span><br><span class="line">                aspect_ratios: 0.5</span><br><span class="line">                aspect_ratios: 3.0</span><br><span class="line">                aspect_ratios: 0.3333</span><br><span class="line">                reduce_boxes_in_lowest_layer: true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        image_resizer &#123;</span><br><span class="line">            fixed_shape_resizer &#123;</span><br><span class="line">                height: 300</span><br><span class="line">                width: 300</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        box_predictor &#123;</span><br><span class="line">            convolutional_box_predictor &#123;</span><br><span class="line">                min_depth: 0</span><br><span class="line">                max_depth: 0</span><br><span class="line">                num_layers_before_predictor: 0</span><br><span class="line">                use_dropout: false</span><br><span class="line">                dropout_keep_probability: 0.8</span><br><span class="line">                kernel_size: 3</span><br><span class="line">                box_code_size: 4</span><br><span class="line">                apply_sigmoid_to_scores: false</span><br><span class="line">                conv_hyperparams &#123;</span><br><span class="line">                activation: RELU_6,</span><br><span class="line">                regularizer &#123;</span><br><span class="line">                    l2_regularizer &#123;</span><br><span class="line">                        weight: 0.00004</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                initializer &#123;</span><br><span class="line">                        truncated_normal_initializer &#123;</span><br><span class="line">                            stddev: 0.03</span><br><span class="line">                            mean: 0.0</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        feature_extractor &#123;</span><br><span class="line">            type: &apos;ssd_inception_v2&apos; # Set to the name of your chosen pre-trained model</span><br><span class="line">            min_depth: 16</span><br><span class="line">            depth_multiplier: 1.0</span><br><span class="line">            conv_hyperparams &#123;</span><br><span class="line">                activation: RELU_6,</span><br><span class="line">                regularizer &#123;</span><br><span class="line">                    l2_regularizer &#123;</span><br><span class="line">                        weight: 0.00004</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                initializer &#123;</span><br><span class="line">                    truncated_normal_initializer &#123;</span><br><span class="line">                        stddev: 0.03</span><br><span class="line">                        mean: 0.0</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                batch_norm &#123;</span><br><span class="line">                    train: true,</span><br><span class="line">                    scale: true,</span><br><span class="line">                    center: true,</span><br><span class="line">                    decay: 0.9997,</span><br><span class="line">                    epsilon: 0.001,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            override_base_feature_extractor_hyperparams: true</span><br><span class="line">        &#125;</span><br><span class="line">        loss &#123;</span><br><span class="line">            classification_loss &#123;</span><br><span class="line">                weighted_sigmoid &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            localization_loss &#123;</span><br><span class="line">                weighted_smooth_l1 &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            hard_example_miner &#123;</span><br><span class="line">                num_hard_examples: 3000</span><br><span class="line">                iou_threshold: 0.99</span><br><span class="line">                loss_type: CLASSIFICATION</span><br><span class="line">                max_negatives_per_positive: 3</span><br><span class="line">                min_negatives_per_image: 0</span><br><span class="line">            &#125;</span><br><span class="line">            classification_weight: 1.0</span><br><span class="line">            localization_weight: 1.0</span><br><span class="line">        &#125;</span><br><span class="line">        normalize_loss_by_num_matches: true</span><br><span class="line">        post_processing &#123;</span><br><span class="line">            batch_non_max_suppression &#123;</span><br><span class="line">                score_threshold: 1e-8</span><br><span class="line">                iou_threshold: 0.6</span><br><span class="line">                max_detections_per_class: 100</span><br><span class="line">                max_total_detections: 100</span><br><span class="line">            &#125;</span><br><span class="line">            score_converter: SIGMOID</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">train_config: &#123;</span><br><span class="line">    batch_size: 12 # Increase/Decrease this value depending on the available memory (Higher values require more memory and vice-versa)</span><br><span class="line">    optimizer &#123;</span><br><span class="line">        rms_prop_optimizer: &#123;</span><br><span class="line">            learning_rate: &#123;</span><br><span class="line">                exponential_decay_learning_rate &#123;</span><br><span class="line">                    initial_learning_rate: 0.004</span><br><span class="line">                    decay_steps: 800720</span><br><span class="line">                    decay_factor: 0.95</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            momentum_optimizer_value: 0.9</span><br><span class="line">            decay: 0.9</span><br><span class="line">            epsilon: 1.0</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fine_tune_checkpoint: &quot;pre-trained-model/model.ckpt&quot; # Path to extracted files of pre-trained model</span><br><span class="line">    from_detection_checkpoint: true</span><br><span class="line">    # Note: The below line limits the training process to 200K steps, which we</span><br><span class="line">    # empirically found to be sufficient enough to train the pets dataset. This</span><br><span class="line">    # effectively bypasses the learning rate schedule (the learning rate will</span><br><span class="line">    # never decay). Remove the below line to train indefinitely.</span><br><span class="line">    num_steps: 200000</span><br><span class="line">    data_augmentation_options &#123;</span><br><span class="line">        random_horizontal_flip &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    data_augmentation_options &#123;</span><br><span class="line">        ssd_random_crop &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">train_input_reader: &#123;</span><br><span class="line">    tf_record_input_reader &#123;</span><br><span class="line">        input_path: &quot;annotations/train.record&quot; # Path to training TFRecord file</span><br><span class="line">    &#125;</span><br><span class="line">    label_map_path: &quot;annotations/label_map.pbtxt&quot; # Path to label map file</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">eval_config: &#123;</span><br><span class="line">    num_examples: 8000</span><br><span class="line">    # Note: The below line limits the evaluation process to 10 evaluations.</span><br><span class="line">    # Remove the below line to evaluate indefinitely.</span><br><span class="line">    max_evals: 10</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">eval_input_reader: &#123;</span><br><span class="line">    tf_record_input_reader &#123;</span><br><span class="line">        input_path: &quot;annotations/test.record&quot; # Path to testing TFRecord</span><br><span class="line">    &#125;</span><br><span class="line">    label_map_path: &quot;annotations/label_map.pbtxt&quot; # Path to label map file</span><br><span class="line">    shuffle: false</span><br><span class="line">    num_readers: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="訓練模型"><a href="#訓練模型" class="headerlink" title="訓練模型"></a>訓練模型</h2><p>在開始訓練我們的模型之前，要先到 TensorFlow/models/research/object_detection/legacy/ 目錄下<br>複製 train.py 文件到我們的 training_demo資料夾下，我們需要它來訓練模型<br>接著，開啟終端機，cd到 training_demo 目錄下，運行以下代碼，開始訓練！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 train.py --logtostderr --train_dir=training/ --pipeline_config_path=training/ssd_inception_v2_coco.config</span><br></pre></td></tr></table></figure><br><center><font color="black" size="5">運行成功後便會出現以下畫面，模型開始訓練了！</font></center><img src="https://i.imgur.com/FlVPsHI.png" width="50%" height="50%"><center>若出現報錯等問題，請到下面或<a href="https://icthk.github.io/3_CustomObjectReconition.html#%E5%A0%B1%E9%8C%AF%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95"><font color="red" size="3">按這裡</font></a>查詢解決方法</center><br><h2 id="訓練進程"><a href="#訓練進程" class="headerlink" title="訓練進程"></a>訓練進程</h2><h3 id="運行Tensorboard"><a href="#運行Tensorboard" class="headerlink" title="運行Tensorboard"></a>運行Tensorboard</h3><p>TensorFlow提供了一個非常強大方便的功能 Tensorboard，可以讓用戶在一個可視化的環境下監測訓練進展<br>打開終端機cd到 training_demo 目錄下，運行以下代碼：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tensorboard --logdir=training</span><br></pre></td></tr></table></figure><p>然後就會看到Tensorboard回饋了一個localhost端口地址，複製到瀏覽器便能打開Tensorboard了<br><img src="https://i.imgur.com/TCLYklO.png" width="50%" height="50%"><br><img src="https://i.imgur.com/wvHsagw.png" width="70%" height="70%"></p><h3 id="監測訓練進程"><a href="#監測訓練進程" class="headerlink" title="監測訓練進程"></a>監測訓練進程</h3><p>在Tensorboard中，你可以很方便地查看Total Loss（在Losses section下）決定是否停止訓練<br>當Total Loss下降至0~1的範圍內，就代表你的模型已達到了不俗的準確率<br>當然它的實際數值也取值與你採用的模型、提供的樣本數量 及電腦效能配置等因素<br>通常，在標籤圖片數目不多的情況下，當TotalLoss的範圍開始固定/持續（到達極限），我便會停止訓練（好好愛護自己的電腦）</p><h3 id="停止訓練"><a href="#停止訓練" class="headerlink" title="停止訓練"></a>停止訓練</h3><p>你可以留意模型訓練的checkpoint中斷訓練，它可以理解為儲存點（每訓練幾十步就會自動保存）<br>最新的儲存點則在第509步，我看到他的值已經很接近1了，我選擇在523步停止了訓練（ctrl+c/直接關掉終端機）<br>那麼我將會使用509步所保存的模型checkpoint作為我的AI模型了！<br><img src="https://i.imgur.com/Hnl3RpW.png" width="50%" height="50%"><br><br><br></p><h2 id="使用訓練後的模型進行物件識別"><a href="#使用訓練後的模型進行物件識別" class="headerlink" title="使用訓練後的模型進行物件識別"></a>使用訓練後的模型進行物件識別</h2><h3 id="生成新模型配置文件"><a href="#生成新模型配置文件" class="headerlink" title="生成新模型配置文件"></a>生成新模型配置文件</h3><p>把training資料夾複製到 research/object_detection 目錄下，<br>然後開啟終端機運行以下代碼:<br><font color="blue" size="4">注意！第4行的代碼需要根據你的checkpoint文件名作更改！使用較大(最新)數字的文件作為模型</font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 export_inference_graph.py / --input_type image_tensor / --pipeline_config_path training/ssd_inception_v2_coco.config / --trained_checkpoint_prefix training/model.ckpt-509 / --output_directory new_model_graph</span><br></pre></td></tr></table></figure><p>然後就會發現裡面新資料夾new_model_graph已經生成在object_detection目錄下了，這就是我們的新模型了<br><br></p><h3 id="建立新模型label-map"><a href="#建立新模型label-map" class="headerlink" title="建立新模型label map"></a>建立新模型label map</h3><p>在 models/research/object_detection/data 目錄下，新建 label_map.pbtxt 文件，代碼如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">item &#123;</span><br><span class="line">  id: 1</span><br><span class="line">  name: &apos;Garen&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">item &#123;</span><br><span class="line">  id: 2</span><br><span class="line">  name: &apos;Darius&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h3 id="修改物件識別運行文件"><a href="#修改物件識別運行文件" class="headerlink" title="修改物件識別運行文件"></a>修改物件識別運行文件</h3><p>打開Jupyter Notebook來到models/research/object_detection目錄下<br>打開 object_detection_tutorial 文件，根據相應位置修改為以下代碼：<br><br></p><p><font color="blue" size="4">第一處：Model preparation - Variables </font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># What model to download.</span></span><br><span class="line">MODEL_NAME = <span class="string">'new_model_graph'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Path to frozen detection graph. This is the actual model that is used for the object detection.</span></span><br><span class="line">PATH_TO_FROZEN_GRAPH = MODEL_NAME + <span class="string">'/frozen_inference_graph.pb'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># List of the strings that is used to add correct label for each box.</span></span><br><span class="line">PATH_TO_LABELS = os.path.join(<span class="string">'data'</span>, <span class="string">'label_map.pbtxt'</span>)</span><br></pre></td></tr></table></figure><br><p><font color="blue" size="4">第二處：刪除Download Model中的代碼，直接整塊刪除便可</font><br><img src="https://i.imgur.com/NEhmmoO.png" width="50%" height="50%"><br><br></p><p><font color="blue" size="4">第三處：加入識別圖片，根據圖片數量修改Detection中的代碼</font><br>把圖片加入到 models/research/object_detection/test_images 資料夾內，命名圖片為”imageX.jpg”，X為數字。<br><img src="https://i.imgur.com/jm6g7rQ.png" width="35%" height="35%"><br>然後後打開Jupyter Notebook，回到 object_detection_tutorial.ipynb 中，找到 “Detection”功能代碼所在位置<br>根據圖片名稱，修改其中第六行的range()內的數值，用我上面的例子，我只想檢測圖片image3.jpg 和image4.jpg<br>因此，我要修改為 range(3, 5)，第一個數值是imageX中X的值 = 3，第二個數值則是第二張圖片imageX中的X+1 = 5<br><img src="https://i.imgur.com/rTCe2wI.png" width="75%" height="75%"><br><br><br></p><h3 id="運行物件識別程式"><a href="#運行物件識別程式" class="headerlink" title="運行物件識別程式"></a>運行物件識別程式</h3><p>打開object_detection_tutorial.ipynb<br>點擊”Cell”，選擇”Run All” 運行程式的所有代碼<br><img src="https://i.imgur.com/CUukqTI.png" width="75%" height="75%"><br><br></p><center><font color="#blue" size="5">運行成功，拉到最底看看識別結果！</font></center><img src="https://i.imgur.com/P6G6mJD.png" width="50%" height="50%"><br><br><h2 id="報錯解決方法"><a href="#報錯解決方法" class="headerlink" title="報錯解決方法"></a>報錯解決方法</h2><br><h3 id="ModuleNotFoundError-No-module-named-‘protos’報錯解決方法"><a href="#ModuleNotFoundError-No-module-named-‘protos’報錯解決方法" class="headerlink" title="ModuleNotFoundError: No module named ‘protos’報錯解決方法"></a><font color="#ff0000" size="5">ModuleNotFoundError: No module named ‘protos’報錯解決方法</font></h3><p>若你是跟著我上一次mportError: cannot import name ‘string_int_label_map_pb2’報錯的解決方法做，這次你可能會出現這個問題<br>那麼這次，我們要把這個代碼還原，才能讓原模型文件讀取，進行訓練<br>來到object_detection/utils資料夾，開啟label_map_util.py把原先的代碼修改為以下代碼</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># from protos import string_int_label_map_pb2 # 本來是這個</span></span><br><span class="line"><span class="keyword">from</span> object_detection.protos <span class="keyword">import</span> string_int_label_map_pb2 <span class="comment">#修改為這個</span></span><br></pre></td></tr></table></figure><br><h3 id="ImportError-cannot-import-name-‘string-int-label-map-pb2’報錯解決方法"><a href="#ImportError-cannot-import-name-‘string-int-label-map-pb2’報錯解決方法" class="headerlink" title="ImportError: cannot import name ‘string_int_label_map_pb2’報錯解決方法"></a><font color="#ff0000" size="5">ImportError: cannot import name ‘string_int_label_map_pb2’報錯解決方法</font></h3><p>呈上題，因為訓練和運行模型時，導入文件所用的代碼不一，所以訓練完畢後要把代碼還原<br>所以又要來到object_detection/utils資料夾，開啟label_map_util.py修改以下代碼<br><br><br><img src="https://i.imgur.com/bmzL7tx.png" width="75%" height="75%"><br><br></p><h3 id="ImportError-cannot-import-name-‘input-reader-pb2’-from-‘object-detection-protos’報錯解決方法"><a href="#ImportError-cannot-import-name-‘input-reader-pb2’-from-‘object-detection-protos’報錯解決方法" class="headerlink" title="ImportError: cannot import name ‘input_reader_pb2’ from ‘object_detection.protos’報錯解決方法"></a><font color="#ff0000" size="5">ImportError: cannot import name ‘input_reader_pb2’ from ‘object_detection.protos’報錯解決方法</font></h3><p>在終端機 位置（Tensorflow/models/research）運行以下兩句代碼</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">protoc object_detection/protos/*.proto --python_out=.</span><br><span class="line">export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim</span><br></pre></td></tr></table></figure><br><h3 id="ModuleNotFoundError-No-module-named-‘object-detection’報錯解決方法"><a href="#ModuleNotFoundError-No-module-named-‘object-detection’報錯解決方法" class="headerlink" title="ModuleNotFoundError: No module named ‘object_detection’報錯解決方法"></a><font color="#ff0000" size="5">ModuleNotFoundError: No module named ‘object_detection’報錯解決方法</font></h3><p>在終端機 位置（Tensorflow/models/research）運行以下兩句代碼</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">protoc object_detection/protos/*.proto --python_out=.</span><br><span class="line">export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim</span><br></pre></td></tr></table></figure><br><h3 id="ImportError-cannot-import-name-‘anchor-generator-pb2’-from-‘object-detection-protos’報錯解決方法"><a href="#ImportError-cannot-import-name-‘anchor-generator-pb2’-from-‘object-detection-protos’報錯解決方法" class="headerlink" title="ImportError: cannot import name ‘anchor_generator_pb2’ from ‘object_detection.protos’報錯解決方法"></a><font color="#ff0000" size="5">ImportError: cannot import name ‘anchor_generator_pb2’ from ‘object_detection.protos’報錯解決方法</font></h3><p>在終端機 位置（Tensorflow/models/research）運行以下兩句代碼</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">protoc object_detection/protos/*.proto --python_out=.</span><br><span class="line">export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim</span><br></pre></td></tr></table></figure><br><h3 id="Allocation-of-1003520000-exceeds-10-of-system-memory報錯解決方法"><a href="#Allocation-of-1003520000-exceeds-10-of-system-memory報錯解決方法" class="headerlink" title="Allocation of 1003520000 exceeds 10% of system memory報錯解決方法"></a><font color="#ff0000" size="5">Allocation of 1003520000 exceeds 10% of system memory報錯解決方法</font></h3><p>這個問題會發現在訓練模型時，原因是系統內存不足以運行模型訓練<br>而解決方法則是減少訓練中的batch size，簡單來說就是減輕電腦每一步加載訓練的負荷，而訓練時間則會加長<br>打開training/ssd_inception_v2_coco.config 模型配置文件，修改 batch_size 數值（減少）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">train_config: &#123;</span><br><span class="line">    batch_size: 1 # Increase/Decrease this value depending on the available memory (Higher values require more memory and vice-versa)</span><br><span class="line">    optimizer &#123;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p><br><br></p><center><font color="#000000" size="5">即使不熟電腦/AI的你，也能嘗試使用AI技術</font></center><br>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Beginner </tag>
            
            <tag> AI </tag>
            
            <tag> Machine Learning </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux遠程操控 | 機器學習 | 模擬雲計算 TensorFlow | 建構自己的雲計算平台</title>
      <link href="/6_Linux_Remote_Control.html"/>
      <url>/6_Linux_Remote_Control.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><br><center><font size="4">現在網上有很多雲計算平台，你是不是也想擁有一個屬於自己的雲計算平台呢？</font></center><center><font size="4">其實只要你手中有兩台電腦，你就能自己建構出一個雲計算平台，那其中的原理是什麽呢？</font></center><center><font size="4">其實就是自己在一台電腦上做開發編程，然後將開發好的文件推送去雲端運算，就是就是基於遠程控制的原理</font></center><br><img src="https://static.makeuseof.com/wp-content/uploads/2017/02/linux-like-macos-670x335.jpg" width="50%" height="50%"><p><br><br></p><center>例如我有一部Mac，但我不想它進行AI模型訓練，因為需要消耗大量電腦資源。但Mac熒幕的確不錯，寫起代碼來眼睛舒服，可運算的時候肯定會有延遲，同時又想做其他東西，怎麼辦？此時，身邊若有一個計算能力強的 Linux，我們就可以把它變成一個雲計算平台！同時操作2部電腦！</center><img src="https://i.imgur.com/DP7vaKE.jpg" width="50%" height="50%"><p><br><br></p><h3 id="如何建構Linux雲計算系統"><a href="#如何建構Linux雲計算系統" class="headerlink" title="如何建構Linux雲計算系統"></a>如何建構Linux雲計算系統</h3><p>首先需要強調一點，這套「遠程」操控的方法實際上並不是真正的遠程，只是在一個局域網內遠程操控電腦 (同一個路由器下)<br>如果你想是想人在家，卻要操控公司裡的 Linux，需要用到TeamViewer來簡單實現遠程操控<br>在家中或公司的同一個路由器下，我們則可以使用 VNC 或者 SSH 來實現遠程操控<br>想要把 Linux 建構成一個計算伺服器，我們要先學會如何遠程控制和連接Linux，可以選擇以下幾種方式：<br>底層 SSH遠程操控 (MacOS/Linux/Windows) 或者 桌面圖像化工具 VNC / TeamViewer 遠程操控 </p><p><br><br></p><h2 id="SSH遠程操控-MacOS-Linux"><a href="#SSH遠程操控-MacOS-Linux" class="headerlink" title="SSH遠程操控(MacOS/Linux)"></a>SSH遠程操控(MacOS/Linux)</h2><p>使用SSH遠程能夠大大提升你的生產力，同時它也是一種加密的通信通道，可以保證你的電腦安全<br><br></p><h3 id="給Linux安裝OpenSSH"><a href="#給Linux安裝OpenSSH" class="headerlink" title="給Linux安裝OpenSSH"></a>給Linux安裝OpenSSH</h3><p>首先需要確定你的 Linux 上有安裝了 SSH 服務，安裝這個開源的 SSH 工具：OpenSSH，可以把你的 Linux 變成一個伺服器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure><br><h3 id="Mac或Linux-SSH-連接去Linux"><a href="#Mac或Linux-SSH-連接去Linux" class="headerlink" title="Mac或Linux SSH 連接去Linux"></a>Mac或Linux SSH 連接去Linux</h3><p>現在你的 Linux 已經是一個可以被 SSH 登入的狀態了，我們先從 MacOS 或者是你另一台 Linux 開始<br>因為 MacOS 和 Linux 是類似的系統，應用層面上相對比 Windows 簡單，具體操作也十分類似</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh [被控制電腦的用戶名]@[被操控電腦的IP地址]</span><br></pre></td></tr></table></figure><br><p>舉個例子，我要用 Mac 來操控的 Linux 的用戶名叫做 hkg，首先確保你操控和被操控的兩台電腦連接上了同一個路由器<br>然後在 被操控 電腦的 terminal 上輸入ifconfig獲取該電腦的 ip 地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ifconfig</span><br></pre></td></tr></table></figure><br><p>接著找到以 inet 開頭的字樣，這就是Linux在這個路由下的 ip 地址了，我現在的 ip 是 172.16.0.66</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inet addr:172.16.0.66</span><br></pre></td></tr></table></figure><br><p>找到 ip (172.16.0.66) 和用戶名 (hkg)後，回到主操控電腦的 terminal (Mac)。在 terminal 中輸入之前提到的 ssh 開頭的指令<br>然後它就會要求你輸入被操控的 Linux 的用戶密碼。當然，只有知道密碼的人才能登陸你的 Linux，否則就太容易被入侵了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh hkg@172.16.0.66</span><br><span class="line">hkg@172.16.0.66&apos;s password:</span><br></pre></td></tr></table></figure><br><p>確認密碼後，你在操控電腦(Mac)的 terminal 就會變成被操控電腦(Linux)的 terminal了<br>他會顯示以下信息證明你登入成功，現在你就能自由的運用之前所學的<a href="https://icthk.github.io/5_Linux_Commands.html"><font color="red" size="3">Linux指令</font></a> ，在你的電腦上遠程操控 Linux 電腦了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Welcome to Ubuntu 18.04.2 LTS (GNU/Linux 4.18.0-25-generic x86_64)</span><br><span class="line"></span><br><span class="line"> * Documentation:  https://help.ubuntu.com</span><br><span class="line"> * Management:     https://landscape.canonical.com</span><br><span class="line"> * Support:        https://ubuntu.com/advantage</span><br><span class="line"></span><br><span class="line">7 packages can be updated.</span><br><span class="line">0 updates are security updates.</span><br><span class="line"></span><br><span class="line">Last login: Tue Jul 30 10:31:10 2019 from 172.16.0.78</span><br><span class="line">hkg@gt2080tiAI:~$</span><br></pre></td></tr></table></figure><br><h3 id="省略密碼直接登入"><a href="#省略密碼直接登入" class="headerlink" title="省略密碼直接登入"></a>省略密碼直接登入</h3><p>現在你每一次使用 SSH 登入 Linux，它都要求你輸入密碼，比較麻煩。我們可以使用public/private rsa key (公鑰和私鑰) 功能省略密碼</p><p>原理是在 Mac 或者 Linux (控制電腦) 上生成一個 public/private keypair，然後將公鑰(public key) 複製到要被遠程的 Linux 上<br>這樣當你有私鑰的控制電腦要遠程操控這台有公鑰的 Linux，他就能識別你的身份並且幫你配對，而無需輸入密碼了</p><p>打開Terminal輸入指令 ssh-keygen 創建公鑰和私鑰，它會提示你要保存的地方，使用默認的地點，按Enter確定就好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/Users/icthk/.ssh/id_rsa):</span><br></pre></td></tr></table></figure><br><p>確定之後，它會問你是否想要一個保障密碼。如果你確定你的局域網是安全的，這個都可以不填，我也沒填，直接Enter</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase):</span><br></pre></td></tr></table></figure><p>然後它會要求你再次確認，Enter。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enter same passphrase again:</span><br></pre></td></tr></table></figure><br><p>最後，它會顯示以下的畫面，代表著你的密鑰已經生成好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Your identification has been saved in /Users/icthk/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /Users/icthk/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:5Rs2ScEt3EZXyOx6MHtIvbjm+MPP6UsnDOaCHDSE9dg icthk@Kende-MacBook-Pro.local</span><br><span class="line">The key&apos;s randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|       ooo.+.o.o.|</span><br><span class="line">|      .. ++.+.+  |</span><br><span class="line">|        + Eo o   |</span><br><span class="line">|       . = .+ o  |</span><br><span class="line">|        S *.oB . |</span><br><span class="line">|       . + *=o+  |</span><br><span class="line">|        o o..++ .|</span><br><span class="line">|           o=o + |</span><br><span class="line">|          .+o+*. |</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure><br><p>接著，我們把這個生成好的「公鑰」給複製去 被控制的 Linux，指令結構和上面一樣  $ ssh-copy-id [被控制的用户名]@[它的ip]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-copy-id hkg@172.16.0.66</span><br><span class="line"></span><br><span class="line">/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: &quot;/Users/icthk/.ssh/id_rsa.pub&quot;</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys</span><br><span class="line">hkg@172.16.0.66&apos;s password:</span><br></pre></td></tr></table></figure><br><p>輸入正確密碼後，會出現以下會面，告訴如何用 SSH 登入被控制端的電腦。然後，你就可以直接無需密碼登入遠端Linux了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Number of key(s) added:        1</span><br><span class="line"></span><br><span class="line">Now try logging into the machine, with:   &quot;ssh &apos;hkg@172.16.0.66&apos;&quot;</span><br><span class="line">and check to make sure that only the key(s) you wanted were added.</span><br></pre></td></tr></table></figure><p><br><br></p><h2 id="SSH遠程操控-Windows"><a href="#SSH遠程操控-Windows" class="headerlink" title="SSH遠程操控(Windows)"></a>SSH遠程操控(Windows)</h2><h3 id="下載PuTTY-SSH軟件"><a href="#下載PuTTY-SSH軟件" class="headerlink" title="下載PuTTY SSH軟件"></a>下載PuTTY SSH軟件</h3><p>在 Windows 上，SSH 不像 Linux 和 MacOS 那樣常用，而且 Windows 系統所使用內核也和 Linux 不太一樣<br>所以我們要通過軟件來實現 SSH (相對容易)。 <a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html" target="_blank" rel="noopener"><font color="red" size="3">PuTTY(按我下載)</font></a>是一個開源、免費、而且常被使用的 SSH 軟件</p><p>根據電腦配置安裝好之後，並打開 PuTTY，你會看到下面的畫面，到「Host name (or IP address)」選項填上被控制的 Linux 的 IP<br>獲取被控制 Linux IP 的方法就是在這台 Linux 的 terminal 上輸入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ifconfig</span><br></pre></td></tr></table></figure><p>然後到找和 inet addr 有關的那一串 IP 地址，然後輸入 IP 地址到 PuTTY 的 「Host name (or IP address)」位置<br><img src="https://i.imgur.com/eMGu97X.png" width="50%" height="50%"><br>點擊 Open 按鈕，它會讓你輸入 Linux 的用戶密碼作為確認，然後你就可以開始在 Windows 上操控 Linux了<br><br><br></p><h2 id="桌面圖像化工具-遠程操控"><a href="#桌面圖像化工具-遠程操控" class="headerlink" title="桌面圖像化工具 遠程操控"></a>桌面圖像化工具 遠程操控</h2><p>VNC 或者 Teamviewer 工具則是提供一個可以圖像化桌面的方式來遠程操控電腦，你可以直接在Mac/Windows上操控著Linux的畫面<br><br></p><h3 id="Teamviewer"><a href="#Teamviewer" class="headerlink" title="Teamviewer"></a>Teamviewer</h3><p><a href="https://www.teamviewer.com/en/" target="_blank" rel="noopener"><font color="red" size="3">Teamviewer</font></a> 是通過互聯網(外網)，將你的被控制電腦桌面投影到你的控制電腦上，畫面的流暢度和速度則取決於你的網速和電腦性能<br>如果你只需要控制局域網內的電腦，當然VNC 快一點，因為它不走外網。當然，最快的還是 SSH ，因為不用輸出圖像，用指令控制<br><img src="https://i.imgur.com/WNjiY3K.png" width="70%" height="70%"><br><br></p><h3 id="VNC"><a href="#VNC" class="headerlink" title="VNC"></a>VNC</h3><p>其實VNC (Virtual Network Computing) 是一種應用的統稱，只要你的Linux架設好了一個伺服器的 VNC<br>再通過任何裝備的 VNC 客戶端軟件就能連上伺服器端的電腦了。接下來我們來設置一下吧，打開你的 Linux Terminal，輸入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install x11vnc</span><br></pre></td></tr></table></figure><p>然後設置 x11vnc 密碼，因為我們需要用密碼登入 Linux 的 VNC server</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ x11vnc -storepasswd</span><br><span class="line"></span><br><span class="line">Enter VNC password:</span><br><span class="line">Verify password:</span><br><span class="line">Write password to /home/icthk/.vnc/passwd?  [y]/n y</span><br><span class="line">Password written to: /home/icthk/.vnc/passwd</span><br></pre></td></tr></table></figure><p>設置好之後，在你的 Linux terminal 中輸入以下指令，要求用密碼形式來開啟 VNC 的 server，然後我們就介紹如何接入VNC吧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ x11vnc -usepw</span><br></pre></td></tr></table></figure><p>最後如果出現頻繁中斷x11vnc的現象，你可以在開啟 x11vnc 的時候輸入這個參數，讓它永遠運行，方便外部連接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ x11vnc -usepw -forever</span><br></pre></td></tr></table></figure><p><br><br></p><h3 id="Mac連接VNC"><a href="#Mac連接VNC" class="headerlink" title="Mac連接VNC"></a>Mac連接VNC</h3><p>Mac用戶可以直接使用內置軟件 Screen Sharing 來連接VNC，輸入Linux的 IP地址，再輸入剛剛設置的 VNC 密碼就能連上，十分方便<br><img src="https://i.imgur.com/6ySITcs.png" width="50%" height="50%"><br><img src="https://i.imgur.com/9vZSpHt.jpg" width="70%" height="70%"><br><br></p><h3 id="Windows連接VNC"><a href="#Windows連接VNC" class="headerlink" title="Windows連接VNC"></a>Windows連接VNC</h3><p>由於我們已經在Linux端設置好了一個 VNC 伺服器，在 Windows端，我們需要的只是一個 VNC 客戶端，推薦大家使用<a href="https://www.realvnc.com/en/connect/download/viewer/windows/" target="_blank" rel="noopener"><font color="red" size="3">RealVNC</font></a><br>RealVNC則提供以上2種選擇，而我們現階段只需要客戶端VNC就好，所以下載VNC Viewer吧</p><p>客戶端的 VNC 操作流程都很簡單. 只要求要一個 server 端的 IP 和他的密碼就好，方法與Mac大同小異<br><br></p><h3 id="Linux連接VNC"><a href="#Linux連接VNC" class="headerlink" title="Linux連接VNC"></a>Linux連接VNC</h3><p>Linux也有一款自帶的VNC 軟件，只需要搜索 「VNC」就看到了，運行它，輸入 server 端的 IP 和密碼就可以連接了<br><img src="https://i.imgur.com/4NVc5LI.png" width="70%" height="70%"><br><br><br></p><h2 id="使用自己的雲計算輔助機器學習"><a href="#使用自己的雲計算輔助機器學習" class="headerlink" title="使用自己的雲計算輔助機器學習"></a>使用自己的雲計算輔助機器學習</h2><p>終於來到重點了，眾所周知，在實現機器學習時，我們需要電腦進行數據分析，在訓練模型時，往往都十分考驗機器的配置<br>我手上有一台Mac，還有一台性能較好的Linux，那麼我就可以把訓練模型的這一步推到雲端伺服器(就是我的Linux)上執行<br>這樣一來，就減輕了我的Mac負擔，因為我同時也能在Mac上進行代碼修改，甚至其他的活動，下面簡單展示一下<br><br></p><h3 id="SSH連接Linux"><a href="#SSH連接Linux" class="headerlink" title="SSH連接Linux"></a>SSH連接Linux</h3><p>來看看實際操作吧，首先利用SSH連接遠端，可以看到我的Mac已經連上了遠端的Linux主機<br>Terminal名字也變成了Linux機的名字(hkg@gt2080ti-AI)，打開顯示卡配置可以看到是Linux配置，一張RTX 2080ti<br><img src="https://i.imgur.com/f0PFQjY.png" width="60%" height="60%"><br><br></p><h3 id="scp-推送文件至Linux"><a href="#scp-推送文件至Linux" class="headerlink" title="scp 推送文件至Linux"></a>scp 推送文件至Linux</h3><p>現在我已經準備好訓練文件了，接下來，另開一個新的Terminal，便可以透過scp指令把資料夾全數推送至Linux<br>下面指令分別演示了如何把自己桌面上的 Object_detection.py 文件和 Tensorflow文件夾 推送到 遠端Linux的桌面上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp ~/Desktop/Object_detection.py hkg@172.16.0.66:~/Desktop</span><br></pre></td></tr></table></figure><p>推送文件夾則需要在scp後加上 -r 參數</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp -r ~/Desktop/Tensorflow hkg@172.16.0.66:~/Desktop</span><br></pre></td></tr></table></figure><br><p>那麼就看看我的實際操作吧！注意！以上指令需要在本地電腦的Terminal上執行！而非連接遠程後的Terminal！<br>第一次推送TensorFlow文件因文件太大需時較久，之後我們可以推送個別文件或直接在Linux用nano指令編輯代碼，以提升效率<br><img src="https://i.imgur.com/xZbogP5.png" width="70%" height="70%"><br><br><br></p><h3 id="在伺服器上訓練模型-運行文件"><a href="#在伺服器上訓練模型-運行文件" class="headerlink" title="在伺服器上訓練模型(運行文件)"></a>在伺服器上訓練模型(運行文件)</h3><p>當資料夾都推送至伺服器時，我們便可以在伺服器(Linux)上運行文件，開始進行AI模型訓練了<br>一般有2種方法，第一種是直接在本地Terminal執行相應代碼，第二種是遠程操控Linux Terminal執行代碼(推薦)</p><p>第一種方法：無需先連接遠端電腦，但指令較複雜，且無法建構遠端環境（適用於較簡單的文件運行）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">示範1：在Mac Terminal運行Linux桌面的a.py文件</span><br><span class="line">$ ssh hkg@172.16.0.66 &quot;python3 ~/Desktop/a.py&quot; </span><br><span class="line">示範2：正式訓練模型代碼：</span><br><span class="line">$ ssh hkg@172.16.0.66 &quot;python3 ~/Desktop/Tensorflow/workspace/training_demo/train.py --logtostderr --train_dir=training/ --pipeline_config_path=training/ssd_inception_v2_coco.config&quot;</span><br></pre></td></tr></table></figure><p>第二種方法：簡單，先連接遠端電腦，然後執行相關指令，能有效監測運行環境（機器學習推薦使用）<br><img src="https://i.imgur.com/XrqZpvx.png" width="70%" height="70%"><br><br></p><center><font size="3">模型開始在Linux伺服器上訓練了，而我的Mac也不用「發光發熱」了</font></center><img src="https://i.imgur.com/CyEyrzr.png" width="70%" height="70%"><br><br><center><font size="3">還可以建立VNC連接，使用瀏覽器Tensorboard監測訓練進程</font></center><img src="https://i.imgur.com/yWFaZwH.jpg" width="70%" height="70%"><br><br><h3 id="回傳模型至本機-文件回傳"><a href="#回傳模型至本機-文件回傳" class="headerlink" title="回傳模型至本機(文件回傳)"></a>回傳模型至本機(文件回傳)</h3><p>當AI模型訓練完成時，我們便可再次使用scp 指令， 把相應文件傳回本機Mac進行執行，因為需要可視化的物件識別功能<br>然後可以另開Mac的Terminal運行指令（利用已建立的Mac-&gt;Linux通訊，把整個training資料夾傳回來）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">傳送文件夾需要加上 -r 參數，以下代碼是把Linux桌面的b文件夾 傳回Mac的桌面</span><br><span class="line">$ scp -r hkg@172.16.0.66:~/Desktop/b ~/Desktop</span><br></pre></td></tr></table></figure><center><font size="3">實際情況展示，由於我太懶，所以直接把整個training文件夾回傳了</font></center><img src="https://i.imgur.com/C9z0vuE.png" width="70%" height="70%"><br><p>如果還在Linux的Terminal中，想直接從Linux回傳也是可以的，此方法需建立Linux-&gt;Mac的通訊）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r training icthk@172.16.0.64:~/Desktop</span><br></pre></td></tr></table></figure><p><br><br></p><h3 id="在Mac上運行物件識別程式"><a href="#在Mac上運行物件識別程式" class="headerlink" title="在Mac上運行物件識別程式"></a>在Mac上運行物件識別程式</h3><p>接下來，我們就可以導入訓練後模型至Object Detection的文件夾內，以及設置進行配置(有興趣請到<a href="https://icthk.github.io/3_CustomObjectReconition.html"><font color="red" size="3">AI系列</font></a>觀看)<br>然後就直接運行物件識別程式看看吧，結果就是利用我們Linux伺服器上訓練的模型所識別出的結果了！準確率表現不俗！<br><img src="https://i.imgur.com/GDjYCTC.png" width="70%" height="70%"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
            <tag> TensorFlow </tag>
            
            <tag> Linux </tag>
            
            <tag> Remote Control </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux簡易教學 | 基本指令 | 作業系統</title>
      <link href="/5_Linux_Commands.html"/>
      <url>/5_Linux_Commands.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Linux 的進階用戶，基本上都是透過 Terminal 和指令/命令 (command) 來操控電腦運作的。<br>甚至有些電腦沒有熒幕，也只能用指令來控制，例如伺服器、raspberry pi等。<br>因此，如果你想更了解更多關於Linux或command line interface的操作，那麼就繼續看下去吧</p><img src="https://i.imgur.com/yXjolMb.gif" width="50%" height="50%"><!-- ![想要完成以上效果嗎？其實並不難！](https://i.imgur.com/DhCdMuM.jpg)--><br><br><h3 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h3><p>其實電腦的指令大部分都是在進行文件目錄之間的處理，例如比如把文件 B 移動到 資料夾A， 新建文件 C, 改寫文件 B 的內容等等。<br>試想像有黑客入侵了你的電腦，多數就是為了找到你電腦裏重要的文件，然後複製過去他的電腦。<br>其實整個互聯網都是一個文件傳輸器，它能將你的網頁以文件的形式發送到你的電腦。<br>因此，學會如何在Linux擺弄文件十分重要。接下來的內容，我們就介紹一些基礎的處理文件方法：<br>以下內容會從 目錄管理、文件管理、資料夾管理、文件查看與編輯 方面進行介紹，讀者可從左邊目錄查詢相關指令內容<br><br><br></p><h2 id="目錄管理"><a href="#目錄管理" class="headerlink" title="目錄管理"></a>目錄管理</h2><br><h3 id="pwd-顯示目前目錄"><a href="#pwd-顯示目前目錄" class="headerlink" title="pwd 顯示目前目錄"></a>pwd 顯示目前目錄</h3><p>打開Terminal，我們第一件事需要知道現在自己的路徑在哪，輸入pwd後按Enter即可立即查看<br>pwd 是 Print Working Directory 的縮寫，也就是顯示目前所在目錄的命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@icthk:~$ pwd</span><br><span class="line">/home/kit</span><br></pre></td></tr></table></figure><br><h3 id="ls-列出目錄資訊"><a href="#ls-列出目錄資訊" class="headerlink" title="ls 列出目錄資訊"></a>ls 列出目錄資訊</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@icthk:~/home/icthk$ ls</span><br><span class="line">file1.txt folder1</span><br></pre></td></tr></table></figure><br><p>透過輸入ls命令，可以看到我的目錄下有file1.txt文件和folder1資料夾<br>我們也可以給命令加上不同的參數，使用更進階的功能，例如<br>1）輸出詳細資訊 -l (long 的簡寫) 這個指令會打印出文件的權限、用戶名、文件大小、修改日期、文件名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@icthk:~/home/icthk$ ls -l</span><br><span class="line">total 4</span><br><span class="line">-rw-rw-r-- 1 icthk icthk    0 Jul 19 07:30 file1.txt</span><br><span class="line">drwxrwxr-x 2 icthk icthk 4096 Jul 19 07:30 folder1</span><br></pre></td></tr></table></figure><br><p>2) 顯示所有文件 -a (all 的簡寫) 這裏會顯示隱藏的文件 (以.開頭的文件)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls -a</span><br><span class="line">.  ..  file1  folder1  .hidden_file</span><br></pre></td></tr></table></figure><br><p>3）人性化顯示 -lh (human) 這裡的文件大小使用了 K、MB、GB換算顯示，為了方便給人觀看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ls -lh</span><br><span class="line">total 4.0K</span><br><span class="line">-rw-rw-r-- 1 icthk icthk    0 Jul 19 07:38 file1.txt</span><br><span class="line">drwxrwxr-x 2 icthk icthk 4.0K Jul 19 07:38 folder1</span><br></pre></td></tr></table></figure><br><p>4）還有很多不同的功能，我們可以通過 –help 來查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls --help</span><br></pre></td></tr></table></figure><br><h3 id="cd-切換目錄"><a href="#cd-切換目錄" class="headerlink" title="cd 切換目錄"></a>cd 切換目錄</h3><p>介紹完顯示目錄，和查看文件的命令之後，當然要試試如何去到另外一個目錄(地方)了，這裡我們會介紹cd指令<br>cd 就是change directory的簡稱，其實每次打開Terminal，它都會默認你在用戶目錄 (Home)路徑<br>而Terminal 中的 ~ $ 就是說你輸入指令將在 ~ 這個目錄下執行，而 ~ 這個符號代表的是你的 Home 目錄<br>想從 Home 去 Documents 這個資料夾的話，輸入下面的命令就可以了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~$ cd Downloads</span><br></pre></td></tr></table></figure><br>接著你會看到它在下一行跳出了以下這個東西，在 $ 前面的 ~/Documents 就說明你現在已經在 Documents 這個資料夾裡了，你現在要執行的命令將會在這個目錄下生效<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/Downloads$</span><br></pre></td></tr></table></figure><br><p>接著我們來列舉其他常用的 cd 指令：</p><p>1）返回上一级目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~/Documents$ cd ..</span><br><span class="line">~$</span><br></pre></td></tr></table></figure><br><p>2）前往子資料夾</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~$ cd Documents/folder1/</span><br><span class="line">~/Documents/folder1$</span><br></pre></td></tr></table></figure><br><p>3）返回你剛剛所在的目錄</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~/Documents/folder1$ cd -</span><br><span class="line">/home/icthk</span><br><span class="line">~$</span><br><span class="line">&lt;br&gt;</span><br></pre></td></tr></table></figure><p>4）向上返回兩次</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~/Documents/folder1$ cd ../../</span><br><span class="line">~$</span><br></pre></td></tr></table></figure><br><p>5）去往Home</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~/Documents/folder1$ cd ~</span><br><span class="line">~$</span><br></pre></td></tr></table></figure><br><p>6）去往任何一個資料夾(目錄)，需要絕對路徑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~$ cd /home/icthk/Documents/folder1</span><br><span class="line">~/Documents/folder1$</span><br></pre></td></tr></table></figure><p><br><br></p><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><p>接下來就要介紹的功能是文件管理中最主要的 新建、複製、移動、移除功能<br><br></p><h3 id="touch-新建"><a href="#touch-新建" class="headerlink" title="touch 新建"></a>touch 新建</h3><p>touch 的使用很簡單，我們先cd到 Documents 的資料夾，裏面已經有了 folder1 和 file1.txt文件了<br>如果我們想新建一個file2.txt文件的話，使用下面的語句就好，一個空文件就建立好了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ touch file2.txt</span><br></pre></td></tr></table></figure><br>如果你想同時新建多個文件也是可以的<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ touch file3.txt file4.txt file5.txt</span><br></pre></td></tr></table></figure><br><h3 id="cp-複製"><a href="#cp-複製" class="headerlink" title="cp 複製"></a>cp 複製</h3><p>cp (copy) 是覆制文件或者資料夾的指令，常用的方式是從 “舊文件名” 複製出 “新文件名”<br>1）我們用之前建立好的 file1.txt 來舉例, 將 file1.txt 複製出 file1copy.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp file1.txt file1copy.txt</span><br></pre></td></tr></table></figure><br><p>2）複製到資料夾</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp file1.txt folder1/</span><br></pre></td></tr></table></figure><br><p>3）複製資料夾，需要加上 -r (recursive)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp -r folder1 folder2</span><br></pre></td></tr></table></figure><br><p>4）複製多個指定文件，例如下面把file1copy和file2.txt 複製到 folder1/，它 會默認最後一個選項是複製去的資料夾</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp file1copy.txt file2.txt folder1/</span><br></pre></td></tr></table></figure><br><h3 id="mv-移動-重命名"><a href="#mv-移動-重命名" class="headerlink" title="mv 移動(+重命名)"></a>mv 移動(+重命名)</h3><p>在了解了 cp 和 mv後就好理解多了，因為操作和概念大致相同<br>1）移動file1.txt文件到folder1資料夾</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mv  file1.txt folder1/</span><br></pre></td></tr></table></figure><br><p>2）重新命名文件<br>想像成移動文件到原來的地點，但是以不同的文件名，這樣=重命名!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mv  file1.txt file1rename.txt</span><br></pre></td></tr></table></figure><br><h3 id="rm-移除文件"><a href="#rm-移除文件" class="headerlink" title="rm 移除文件"></a>rm 移除文件</h3><p>想要移除單個文件，我們可以使用 rm 命令來實現。但要注意，執行了 rm 以後是不能進行返回操作的<br>因此，在移除文件前必須要仔細確認，而且也別嘗試執行像這樣的操作 rm /，這會清空你的電腦！<br>1）移除單個文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rm file1.txt</span><br></pre></td></tr></table></figure><br><p>2）-i (interactive) 避免誤刪<br>避免直接刪除文件，我們在 cp 後面加一個選項 -i，在這句問句後面打上 “Yes”, “Y”, 或者任何大小寫形式的 “y” 和 “yes”，它將進行移除操作。直接回車或者打其他字母， 就會放棄這項操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ rm -i file1.txt</span><br><span class="line">rm: remove regular empty file &apos;f1&apos;?</span><br></pre></td></tr></table></figure><br><p>3）-r (recursive) 移除資料夾<br>此命令可以一次移除資料夾以及資料夾內的文件，與rmdir不同</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rm -r folder1</span><br></pre></td></tr></table></figure><p><br><br></p><h2 id="資料夾管理"><a href="#資料夾管理" class="headerlink" title="資料夾管理"></a>資料夾管理</h2><h3 id="mkdir建立資料夾"><a href="#mkdir建立資料夾" class="headerlink" title="mkdir建立資料夾"></a>mkdir建立資料夾</h3><p>mkdir (make directory) 照字面解釋就是創建一個資料夾的意思</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir folder2</span><br></pre></td></tr></table></figure><br><p>若想在folder2內再新建一個文件也是可以的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir folder2/folder3</span><br></pre></td></tr></table></figure><br><h3 id="rmdir-移除資料夾"><a href="#rmdir-移除資料夾" class="headerlink" title="rmdir 移除資料夾"></a>rmdir 移除資料夾</h3><p>rmdir (remove directory) 命令可移除資料夾，但前提是要移除的資料夾必須是空的，否則會失敗</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rmdir folder3</span><br></pre></td></tr></table></figure><br><p>若要刪除整個資料夾(包括裡面的文件)，需要使用 rm -r 命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rm -r folder3</span><br></pre></td></tr></table></figure><p><br><br></p><h2 id="查看以及編輯文件"><a href="#查看以及編輯文件" class="headerlink" title="查看以及編輯文件"></a>查看以及編輯文件</h2><p>接著，我們想要了解的是在 linux 中，怎樣可以查看和編輯文件內容，這裡將會介紹nano 和 cat 指令完成基本操作<br><br></p><h3 id="nano-文字編輯工具"><a href="#nano-文字編輯工具" class="headerlink" title="nano 文字編輯工具"></a>nano 文字編輯工具</h3><p>nano 是 linux自帶的一款文字編輯工具，我們使用它做為最基本的 terminal 端的文本編輯，甚至可以寫代碼 (比vi編輯器容易上手)<br>下面我們用 touch 創建一個txt文件，然後用nano編輯其內容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nano script.txt</span><br></pre></td></tr></table></figure><br><img src="https://i.imgur.com/bziKq3f.png" width="75%" height="75%"><br><br><p>然後輸入你想編輯的內容！按 “Ctrl + x” 來保存和退出，如果提示你保存，你就按一下 “y” 鍵，然後Enter確認文件名就可以保存了<br><img src="https://i.imgur.com/w8QbwMD.png" width="75%" height="75%"><br><br></p><h3 id="cat-顯示文件內容"><a href="#cat-顯示文件內容" class="headerlink" title="cat 顯示文件內容"></a>cat 顯示文件內容</h3><p>現在，我們可以用cat (catenate) 來顯示剛才編輯過的文件內容了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat script.txt</span><br></pre></td></tr></table></figure><br><p>而文件內容便會隨即顯示在Terminal中！<br><img src="https://i.imgur.com/jZ6cUMm.png" width="50%" height="50%"></p><center><font color="#000000" size="5">是不是很方便呢！學習了那麼多指令，接下來換你去嘗試和探索了！</font></center><br>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Beginner </tag>
            
            <tag> Linux </tag>
            
            <tag> Operating System </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新手也會用AI | 物件識別 | TensorFlow</title>
      <link href="/2_ObjectReconition.html"/>
      <url>/2_ObjectReconition.html</url>
      
        <content type="html"><![CDATA[<h2 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>AI (Artificial Intelligence)可謂是最近最熱門的科技技術之一，作為電腦新手，想要應用AI技術其實並不難。皆因現在很多開發公司已經提供了不同版本的API模型。我們只需配置適當開發環境，並安裝相應的模型便可一嘗AI入門技術。因此，就算你沒有相關知識，也可以實現不少AI功能。在是次應用中，我們將會實現物件檢測(object recognition)功能，用到的API是到Google釋出的Tensorflow Object Detection模型。模型效果圖如下，是不是很心動想創造屬於自己的物件檢測程式呢？我們一起動手試下吧！</p><img src="https://i.imgur.com/DhCdMuM.jpg" width="507" height="337.5"><!-- ![想要完成以上效果嗎？其實並不難！](https://i.imgur.com/DhCdMuM.jpg)--><br><br><h2 id="配置環境"><a href="#配置環境" class="headerlink" title="配置環境"></a>配置環境</h2><br><h3 id="安裝Python"><a href="#安裝Python" class="headerlink" title="安裝Python"></a>安裝Python</h3><p>Windows 以及 MacOS 用戶可直接從Python官網下載安裝，建議安裝3.7版本<br>Linux用戶則可透過從終端機(Terminal)安裝，指令如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python3.7</span><br></pre></td></tr></table></figure><br><h3 id="安裝Tensorflow"><a href="#安裝Tensorflow" class="headerlink" title="安裝Tensorflow"></a>安裝Tensorflow</h3><p>打開你的終端機(Terminal)，並且按照以下指令安裝配置環境。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install tensorflow</span><br></pre></td></tr></table></figure><br><h3 id="安裝相關庫"><a href="#安裝相關庫" class="headerlink" title="安裝相關庫"></a>安裝相關庫</h3><p>Windows 以及 MacOS 用戶透過從終端機(Terminal)安裝</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pip3 install --user Cython</span><br><span class="line">pip3 install --user contextlib2</span><br><span class="line">pip3 install --user pillow</span><br><span class="line">pip3 install --user lxml</span><br><span class="line">pip3 install --user jupyter</span><br><span class="line">pip3 install --user matplotlib</span><br></pre></td></tr></table></figure><br><p>Ubuntu Linux用戶則可以使用apt安裝其餘的套件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install protobuf-compiler python-pil python-lxml python-tk</span><br><span class="line">pip3 install --user Cython</span><br><span class="line">pip3 install --user contextlib2</span><br><span class="line">pip3 install --user jupyter</span><br><span class="line">pip3 install --user matplotlib</span><br></pre></td></tr></table></figure><br><h3 id="下載物件識別API"><a href="#下載物件識別API" class="headerlink" title="下載物件識別API"></a>下載物件識別API</h3><p>新建資料夾”Tensorflow”，到API的Github官網 <a href="https://github.com/tensorflow/models" target="_blank" rel="noopener">https://github.com/tensorflow/models</a><br>Clone/下載 models-master資料夾(下載需時請耐心等待)，重命名為models，放進Tensorflow內，目錄示意圖如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TensorFlow</span><br><span class="line">└─ models</span><br><span class="line">    ├── official</span><br><span class="line">    ├── research</span><br><span class="line">    ├── samples</span><br><span class="line">    └── tutorials</span><br></pre></td></tr></table></figure><br><h3 id="編譯-Protobuf-函式庫"><a href="#編譯-Protobuf-函式庫" class="headerlink" title="編譯 Protobuf 函式庫"></a>編譯 Protobuf 函式庫</h3><p>在使用Tensorflow Object Detection API前，需要先編譯 Protobuf 函式庫<br>打開終端機，依次進入Tensorflow、models，最終到達research目錄內，方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd Tensorflow/models/research</span><br></pre></td></tr></table></figure><p>輸入以下指令，編譯 Protobuf 函式庫</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc object_detection/protos/*.proto --python_out=.</span><br></pre></td></tr></table></figure><br><p>輸入以下指令將 models/research 與 models/research/slim 加入 PYTHONPATH 環境變數中<br>這個步驟在每次使用 Tensorflow Object Detection API 之前都要執行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim</span><br></pre></td></tr></table></figure><br><h2 id="運行範例程式"><a href="#運行範例程式" class="headerlink" title="運行範例程式"></a>運行範例程式</h2><br><h3 id="開啟-Jupyter-Notebook"><a href="#開啟-Jupyter-Notebook" class="headerlink" title="開啟 Jupyter Notebook"></a>開啟 Jupyter Notebook</h3><p>Tensorflow Object Detection API 的原始碼中有附帶一個簡單的入門範例程式，位於 models/research/object_detection/object_detection_tutorial.ipynb，適合初學者來學習如何使用這套 API，這個範例程式是一個 .ipynb 的文件，需要在 IPython Notebook 環境中執行。因此，我們需要開啟並且運行Jupyter Notebook，並找到以下路徑。</p><img src="https://i.imgur.com/WEEF78K.png"><br><br><h3 id="運行範例程式-1"><a href="#運行範例程式-1" class="headerlink" title="運行範例程式"></a>運行範例程式</h3><p>打開object_detection_tutorial.ipynb<br>點擊”Cell”，選擇”Run All” 運行程式的所有代碼    </p><img src="https://i.imgur.com/CUukqTI.png"><br><br><center><font color="#000000" size="4">頁面拉到最底，查看輸出結果吧！</font></center><img src="https://i.imgur.com/cTr8LJY.png" width="75%" height="75%"><br><br><h3 id="tf-gfile-GFile-不適用而報錯的解決方法"><a href="#tf-gfile-GFile-不適用而報錯的解決方法" class="headerlink" title="tf.gfile.GFile 不適用而報錯的解決方法"></a><font color="#ff0000" size="5">tf.gfile.GFile 不適用而報錯的解決方法</font></h3><img src="https://i.imgur.com/PCCho4q.png"><br><br><p>根據指示，找到 utils/label_map_util.py 檔案，在137行把 tf.gfile.GFile 修改為 tf.io.gfile.GFile ，操作如下：<br><img src="https://i.imgur.com/cfBNBk5.png" width="75%" height="75%"><br><br><br></p><h3 id="ImportError-cannot-import-name-‘string-int-label-map-pb2’報錯解決方法"><a href="#ImportError-cannot-import-name-‘string-int-label-map-pb2’報錯解決方法" class="headerlink" title="ImportError: cannot import name ‘string_int_label_map_pb2’報錯解決方法"></a><font color="#ff0000" size="5">ImportError: cannot import name ‘string_int_label_map_pb2’報錯解決方法</font></h3><p>這個錯誤很大機會出現在MacOS或者Windows系統用戶，因為其系統無法從源文件匯入資料<br>解決方法如下，來到object_detection/utils資料夾，開啟label_map_util.py修改以下代碼<br><br><br><img src="https://i.imgur.com/bmzL7tx.png" width="75%" height="75%"><br>若問題依舊，需要在終端機 位置（Tensorflow/models/research）運行以下兩句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">protoc object_detection/protos/*.proto --python_out=.</span><br><span class="line">export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim</span><br></pre></td></tr></table></figure><p><br><br></p><h2 id="自行加入圖片進行物件識別"><a href="#自行加入圖片進行物件識別" class="headerlink" title="自行加入圖片進行物件識別"></a>自行加入圖片進行物件識別</h2><p>最後，我們可以加入圖片測試識別的準確度，這裡我用了 image3.jpg 及image4.jpg<br>把圖片加入到 models/research/object_detection/test_images 資料夾內，命名圖片為”imageX.jpg”，X為數字。<br><img src="https://i.imgur.com/jm6g7rQ.png" width="35%" height="35%"><br><br><br><br>然後後打開Jupyter Notebook，回到 object_detection_tutorial.ipynb 中，找到 “Detection”功能代碼所在 (122行)<br>根據圖片名稱，修改其中第六行的range()內的數值，用我上面的例子，我只想檢測圖片image3.jpg 和image4.jpg<br>因此，我要修改為 range(3, 5)，第一個數值是imageX中X的值 = 3，第二個數值則是第二張圖片imageX中的X+1 = 5<br><img src="https://i.imgur.com/rTCe2wI.png" width="75%" height="75%"><br><br><br></p><center><font color="#000000" size="5">運行成功，看看識別結果！</font></center><img src="https://i.imgur.com/5ZFk0i7.png" width="75%" height="75%"><br><br><center><font color="#000000" size="5">即使不熟電腦/AI的你，也能嘗試使用AI技術</font></center><br>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Beginner </tag>
            
            <tag> AI </tag>
            
            <tag> Machine Learning </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何安裝Linux | Windows | MacOS</title>
      <link href="/4_Linux_Install.html"/>
      <url>/4_Linux_Install.html</url>
      
        <content type="html"><![CDATA[<h2 id="為什麼要使用Linux？"><a href="#為什麼要使用Linux？" class="headerlink" title="為什麼要使用Linux？"></a>為什麼要使用Linux？</h2><p>我們知道，電腦有不同的作業系統，耳熟能詳的有Windows 10、MacOS，Linux也是其中一款最多人使用的作業系統之一<br>那麼為什麼我們要使用Linux呢，因為現階段不少機器學習的開發環境是基於 Linux 的，因此還是十分建議學習Linux的開發環境<br>在之後，我也會總結自己學習 Linux 的一些基本使用原則，以及解釋如何用它來輔助機器學習<br>或許你有多一台舊電腦，那麼我們可以安裝Linux改善體驗(運行速度)，又或者，像我一樣<br>利用Mac編寫代碼(高清熒幕)，然後把代碼推送至Linux運行(原Windows的性能較好)，合理分配資源<br>要安裝Linux，首先，我們需要準備USB stick來安裝(無論你是Windows或Mac)，下面將會詳細指示你如何做<br><img src="https://i.imgur.com/mTynlXM.jpg" width="70%" height="70%"><br><br></p><h2 id="創建Ubuntu-USB文件-Windows用戶"><a href="#創建Ubuntu-USB文件-Windows用戶" class="headerlink" title="創建Ubuntu USB文件(Windows用戶)"></a>創建Ubuntu USB文件(Windows用戶)</h2><h3 id="安裝需求"><a href="#安裝需求" class="headerlink" title="安裝需求"></a>安裝需求</h3><p>你需要滿足以下條件：<br>· 至少4GB的 USB stick/flash drive<br>· Microsoft Windows XP 或之後的版本<br>· Rufus：免費開源的USB寫入工具：<a href="https://rufus.ie/" target="_blank" rel="noopener"><font color="red" size="3">按這裡</font></a>下載<br>· Ubuntu ISO 文件： <a href="https://ubuntu.com/download/desktop" target="_blank" rel="noopener"><font color="red" size="3">按這裡</font></a>下載<br><br></p><h3 id="USB-選擇"><a href="#USB-選擇" class="headerlink" title="USB 選擇"></a>USB 選擇</h3><p>按順序完成以下操作：</p><ol><li>運行Rufus</li><li>插入USB stick</li><li>Rufus 將會升級以及設置USB設備</li><li>若設備選擇錯誤(多個USB插入)，需要選擇正確的安裝設備<br><img src="https://i.imgur.com/uWHFdbE.png" width="50%" height="50%"><br></li></ol><h3 id="啟動選擇及分區方案"><a href="#啟動選擇及分區方案" class="headerlink" title="啟動選擇及分區方案"></a>啟動選擇及分區方案</h3><p>選擇你的USB設備，根據圖片指示完成<br><img src="https://i.imgur.com/raiEFuB.png" width="50%" height="50%"><br><br></p><h3 id="選擇Ubuntu-ISO文件"><a href="#選擇Ubuntu-ISO文件" class="headerlink" title="選擇Ubuntu ISO文件"></a>選擇Ubuntu ISO文件</h3><p>選擇你之前下載好的Ubuntu ISO文件(你的版本可能不同)<br><img src="https://i.imgur.com/9QuAku1.png" width="75%" height="75%"><br><br></p><h3 id="寫入ISO文件"><a href="#寫入ISO文件" class="headerlink" title="寫入ISO文件"></a>寫入ISO文件</h3><p>根據圖片指示完成<br><img src="https://i.imgur.com/m6ZImWa.png" width="50%" height="50%"><br><br></p><h3 id="額外下載"><a href="#額外下載" class="headerlink" title="額外下載"></a>額外下載</h3><p>有可能會出現以下警告下載額外文件，若提示出現，點擊Yes就好<br><img src="https://i.imgur.com/OxeDCA8.png" width="50%" height="50%"><br><br></p><h3 id="寫入警告"><a href="#寫入警告" class="headerlink" title="寫入警告"></a>寫入警告</h3><p>提示Ubuntu ISO是一個ISOHybrid 圖像可能會出現，這代表你的鏡像文件可以在DVD或USB使用<br>保持Write in ISO Image mode 選擇，然後點擊OK繼續<br><img src="https://i.imgur.com/KYtqqMm.png" width="50%" height="50%"><br><br><br>Rufus也會警告你的USB資料將會被清除，點擊OK繼續<br><img src="https://i.imgur.com/9n8LfO2.png" width="50%" height="50%"><br><br></p><h3 id="ISO鏡像文件寫入中"><a href="#ISO鏡像文件寫入中" class="headerlink" title="ISO鏡像文件寫入中"></a>ISO鏡像文件寫入中</h3><p>需要時間大概10分鐘左右<br><img src="https://i.imgur.com/h8mQtwg.png" width="50%" height="50%"><br><br></p><h3 id="USB安裝完成"><a href="#USB安裝完成" class="headerlink" title="USB安裝完成"></a>USB安裝完成</h3><p>恭喜你已安裝成功，點擊CLOSE關閉即可，然後可以重啟電腦<br>電腦便會使用USB啟動Linux的安裝文件，若無法自動啟動，請開機時按著F12鍵，安裝詳情可請看文章之後的指示<br><img src="https://i.imgur.com/ZMJGEUf.png" width="50%" height="50%"><br><br></p><h2 id="創建Ubuntu-USB文件-MacOS用戶"><a href="#創建Ubuntu-USB文件-MacOS用戶" class="headerlink" title="創建Ubuntu USB文件(MacOS用戶)"></a>創建Ubuntu USB文件(MacOS用戶)</h2><h3 id="安裝需求-1"><a href="#安裝需求-1" class="headerlink" title="安裝需求"></a>安裝需求</h3><p>你需要滿足以下條件：<br>· 至少2GB的 USB stick/flash drive<br>· 一台Apple電腦或者手提電腦並運行著MacOS系統<br>· Ubuntu ISO 文件： <a href="https://ubuntu.com/download/desktop" target="_blank" rel="noopener"><font color="red" size="3">按這裡</font></a>下載<br><br></p><h3 id="準備USB-stick"><a href="#準備USB-stick" class="headerlink" title="準備USB stick"></a>準備USB stick</h3><p>為了保證Apple設備的最大兼容性，我們需要使用Apple的磁碟工具程式來重新格式化USB，操作指示如圖<br><img src="https://i.imgur.com/Nl9K04I.png" width="75%" height="75%"><br><br></p><h3 id="安裝以及運行Etcher"><a href="#安裝以及運行Etcher" class="headerlink" title="安裝以及運行Etcher"></a>安裝以及運行Etcher</h3><p>我們需要下載<a href="https://www.balena.io/etcher/" target="_blank" rel="noopener"><font color="red" size="3">Etcher</font></a>來把我們的ISO文件寫入USB，在MacOS環境下，我們需要信任下載程式的來源<br><img src="https://i.imgur.com/BDEXp9n.png" width="50%" height="50%"><br><br></p><h3 id="Etcher配置"><a href="#Etcher配置" class="headerlink" title="Etcher配置"></a>Etcher配置</h3><p>Etcher需要2個階段配置你的USB設備，包括選擇鏡像文件(ISO)、選擇儲存設備(USB)<br><img src="https://i.imgur.com/Xr3eo8y.png" width="50%" height="50%"><br><br></p><h3 id="寫入USB設備"><a href="#寫入USB設備" class="headerlink" title="寫入USB設備"></a>寫入USB設備</h3><p>輸入密碼後，Etcher將會把ISO文件寫入你的USB設備，寫入完成後，它將會提示你操作已完成<br><img src="https://i.imgur.com/9AhosyH.png" width="50%" height="50%"><br><br></p><h3 id="重啟你的Mac"><a href="#重啟你的Mac" class="headerlink" title="重啟你的Mac"></a>重啟你的Mac</h3><p>重新啟動電腦，在開機時按著Option/alt(⌥) 鍵，啟動管理員畫面將會出現，選擇金/黃色的設備開始安裝Linux<br><img src="https://i.imgur.com/WBAtNtY.png" width="70%" height="70%"><br><br><br></p><h2 id="正式安裝Linux系統-Ubuntu"><a href="#正式安裝Linux系統-Ubuntu" class="headerlink" title="正式安裝Linux系統(Ubuntu)"></a>正式安裝Linux系統(Ubuntu)</h2><p>不論你是Windows還是MacOS用戶，當你成功把Ubuntu的ISO文件寫入USB後，便可重啟電腦準備Linux的安裝了<br>Windows用戶可開機按F12，MacOS則是option鍵，進入Linux安裝環境</p><h3 id="軟件安裝設置"><a href="#軟件安裝設置" class="headerlink" title="軟件安裝設置"></a>軟件安裝設置</h3><p>在選擇好語言以及設置鍵盤偏好後，將會來到軟件安裝配置界面，用戶可按照以下指示進行安裝：<br><img src="https://i.imgur.com/UMrJO0W.png" width="70%" height="70%"><br><br></p><h3 id="分配磁碟空間"><a href="#分配磁碟空間" class="headerlink" title="分配磁碟空間"></a>分配磁碟空間</h3><p>選擇”Something else”，不然會把你原有的系統刪除<br><img src="https://i.imgur.com/ImXurD7.png" width="70%" height="70%"><br><br></p><h3 id="選擇地點"><a href="#選擇地點" class="headerlink" title="選擇地點"></a>選擇地點</h3><img src="https://i.imgur.com/gmkO0bp.png" width="50%" height="50%"><br><h3 id="登錄用戶詳情"><a href="#登錄用戶詳情" class="headerlink" title="登錄用戶詳情"></a>登錄用戶詳情</h3><img src="https://i.imgur.com/Wyf41lU.png" width="70%" height="70%"><br><h3 id="背景下載"><a href="#背景下載" class="headerlink" title="背景下載"></a>背景下載</h3><img src="https://i.imgur.com/pBJebhZ.png" width="50%" height="50%"><br><h3 id="安裝完成"><a href="#安裝完成" class="headerlink" title="安裝完成"></a>安裝完成</h3><p>恭喜你，你已經順利安裝好世界最受歡迎的Linux系統！接下來，我們一起來學習如何使用吧！<br><img src="https://i.imgur.com/ey8i5p1.jpg" width="70%" height="70%"><br><br><br></p><p>文章內容參考以及引用來自 (Reference list)：<br><a href="https://tutorials.ubuntu.com/tutorial/tutorial-create-a-usb-stick-on-windows#0" target="_blank" rel="noopener">https://tutorials.ubuntu.com/tutorial/tutorial-create-a-usb-stick-on-windows#0</a><br><a href="https://tutorials.ubuntu.com/tutorial/tutorial-create-a-usb-stick-on-macos#0" target="_blank" rel="noopener">https://tutorials.ubuntu.com/tutorial/tutorial-create-a-usb-stick-on-macos#0</a><br><a href="https://tutorials.ubuntu.com/tutorial/tutorial-install-ubuntu-desktop#0" target="_blank" rel="noopener">https://tutorials.ubuntu.com/tutorial/tutorial-install-ubuntu-desktop#0</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Beginner </tag>
            
            <tag> Linux </tag>
            
            <tag> Operating System </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/1_hello-world.html"/>
      <url>/1_hello-world.html</url>
      
        <content type="html"><![CDATA[<p><br><font size="10">Welcome to my <a href="https://icthk.github.io">blog</a>! </font><br><br><font size="5"><br>This is my very first post. In this blog, I will record, summerize and share experiences related to various types of computing technologies. Hope that we can make greater progress with our efforts together here.<br>For any questions, you can leave your comment on MessageBoard.<br>Enjoy~<br></font><br><br><br></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Post </tag>
            
            <tag> Diary </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
